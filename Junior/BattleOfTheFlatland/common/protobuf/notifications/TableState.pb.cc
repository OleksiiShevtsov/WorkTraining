// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: TableState.proto
// Protobuf C++ Version: 5.27.3

#include "TableState.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;

inline constexpr SidePotShortStackPerAmountInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : short_stack_{::int64_t{0}},
        amount_{::int64_t{0}},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SidePotShortStackPerAmountInfo::SidePotShortStackPerAmountInfo(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SidePotShortStackPerAmountInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SidePotShortStackPerAmountInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SidePotShortStackPerAmountInfoDefaultTypeInternal() {}
  union {
    SidePotShortStackPerAmountInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SidePotShortStackPerAmountInfoDefaultTypeInternal _SidePotShortStackPerAmountInfo_default_instance_;

inline constexpr SidePotInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : short_stack_{::int64_t{0}},
        amount_{::int64_t{0}},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SidePotInfo::SidePotInfo(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SidePotInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SidePotInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SidePotInfoDefaultTypeInternal() {}
  union {
    SidePotInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SidePotInfoDefaultTypeInternal _SidePotInfo_default_instance_;

inline constexpr PreActionOptionsState::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : seat_pre_actions_{},
        _seat_pre_actions_cached_byte_size_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR PreActionOptionsState::PreActionOptionsState(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct PreActionOptionsStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PreActionOptionsStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PreActionOptionsStateDefaultTypeInternal() {}
  union {
    PreActionOptionsState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PreActionOptionsStateDefaultTypeInternal _PreActionOptionsState_default_instance_;

inline constexpr PlayerOnShowdownState::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : cards_{},
        seat_idx_{0},
        muck_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR PlayerOnShowdownState::PlayerOnShowdownState(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct PlayerOnShowdownStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerOnShowdownStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerOnShowdownStateDefaultTypeInternal() {}
  union {
    PlayerOnShowdownState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerOnShowdownStateDefaultTypeInternal _PlayerOnShowdownState_default_instance_;

inline constexpr PlayerInAllInState::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : cards_{},
        win_percentage_{0},
        seat_idx_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR PlayerInAllInState::PlayerInAllInState(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct PlayerInAllInStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerInAllInStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerInAllInStateDefaultTypeInternal() {}
  union {
    PlayerInAllInState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerInAllInStateDefaultTypeInternal _PlayerInAllInState_default_instance_;

inline constexpr HandPlayedInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : mongo_hand_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        file_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        hand_header_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        hand_body_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR HandPlayedInfo::HandPlayedInfo(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct HandPlayedInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HandPlayedInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HandPlayedInfoDefaultTypeInternal() {}
  union {
    HandPlayedInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HandPlayedInfoDefaultTypeInternal _HandPlayedInfo_default_instance_;

inline constexpr ActionOptionsState::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : seat_actions_{},
        _seat_actions_cached_byte_size_{0},
        min_bet_{::int64_t{0}},
        max_bet_{::int64_t{0}},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ActionOptionsState::ActionOptionsState(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ActionOptionsStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActionOptionsStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActionOptionsStateDefaultTypeInternal() {}
  union {
    ActionOptionsState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActionOptionsStateDefaultTypeInternal _ActionOptionsState_default_instance_;

inline constexpr WinnerState::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : side_pots_short_stacks_{},
        money_reward_{::int64_t{0}},
        seat_idx_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR WinnerState::WinnerState(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct WinnerStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WinnerStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~WinnerStateDefaultTypeInternal() {}
  union {
    WinnerState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WinnerStateDefaultTypeInternal _WinnerState_default_instance_;

inline constexpr SeatState::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        cards_{},
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        user_avatar_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        action_options_{nullptr},
        pre_action_options_{nullptr},
        stake_{::int64_t{0}},
        bet_{::int64_t{0}},
        seat_idx_{0},
        is_folded_{false},
        is_actions_available_{false},
        can_muck_{false},
        is_playing_{false},
        is_disconnected_{false},
        in_sitout_{false},
        can_rebuy_{false},
        optional_last_action_{},
        optional_last_pre_action_{},
        optional_kick_reason_{},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR SeatState::SeatState(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SeatStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SeatStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SeatStateDefaultTypeInternal() {}
  union {
    SeatState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SeatStateDefaultTypeInternal _SeatState_default_instance_;

inline constexpr PotInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : side_pots_{},
        amount_{::int64_t{0}},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR PotInfo::PotInfo(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct PotInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PotInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PotInfoDefaultTypeInternal() {}
  union {
    PotInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PotInfoDefaultTypeInternal _PotInfo_default_instance_;

inline constexpr CardsShowState::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : player_in_allin_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR CardsShowState::CardsShowState(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CardsShowStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CardsShowStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CardsShowStateDefaultTypeInternal() {}
  union {
    CardsShowState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CardsShowStateDefaultTypeInternal _CardsShowState_default_instance_;

inline constexpr ShowdownState::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        winners_{},
        player_on_showdown_{},
        hand_played_info_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR ShowdownState::ShowdownState(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ShowdownStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShowdownStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShowdownStateDefaultTypeInternal() {}
  union {
    ShowdownState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShowdownStateDefaultTypeInternal _ShowdownState_default_instance_;

inline constexpr TableState::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        seats_{},
        community_cards_{},
        showdown_state_{},
        cards_show_state_{},
        spin_multipliers_{},
        _spin_multipliers_cached_byte_size_{0},
        table_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        pot_{nullptr},
        table_id_{::int64_t{0}},
        nt_type_{0},
        seat_idx_bb_{0},
        seat_idx_sb_{0},
        seat_idx_btn_{0},
        bb_amount_{0},
        sb_amount_{0},
        action_time_limit_{::int64_t{0}},
        timebank_activated_{false},
        game_state_{static_cast< ::GameState >(0)},
        active_spins_multiplier_{::uint64_t{0u}},
        my_seat_idx_{0} {}

template <typename>
PROTOBUF_CONSTEXPR TableState::TableState(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TableStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TableStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TableStateDefaultTypeInternal() {}
  union {
    TableState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TableStateDefaultTypeInternal _TableState_default_instance_;
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_TableState_2eproto[4];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_TableState_2eproto = nullptr;
const ::uint32_t
    TableStruct_TableState_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::PlayerOnShowdownState, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::PlayerOnShowdownState, _impl_.seat_idx_),
        PROTOBUF_FIELD_OFFSET(::PlayerOnShowdownState, _impl_.muck_),
        PROTOBUF_FIELD_OFFSET(::PlayerOnShowdownState, _impl_.cards_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::PlayerInAllInState, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::PlayerInAllInState, _impl_.seat_idx_),
        PROTOBUF_FIELD_OFFSET(::PlayerInAllInState, _impl_.cards_),
        PROTOBUF_FIELD_OFFSET(::PlayerInAllInState, _impl_.win_percentage_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::CardsShowState, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CardsShowState, _impl_.player_in_allin_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::WinnerState, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::WinnerState, _impl_.seat_idx_),
        PROTOBUF_FIELD_OFFSET(::WinnerState, _impl_.money_reward_),
        PROTOBUF_FIELD_OFFSET(::WinnerState, _impl_.side_pots_short_stacks_),
        PROTOBUF_FIELD_OFFSET(::ShowdownState, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::ShowdownState, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::ShowdownState, _impl_.winners_),
        PROTOBUF_FIELD_OFFSET(::ShowdownState, _impl_.player_on_showdown_),
        PROTOBUF_FIELD_OFFSET(::ShowdownState, _impl_.hand_played_info_),
        ~0u,
        ~0u,
        0,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::PreActionOptionsState, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::PreActionOptionsState, _impl_.seat_pre_actions_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::ActionOptionsState, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::ActionOptionsState, _impl_.min_bet_),
        PROTOBUF_FIELD_OFFSET(::ActionOptionsState, _impl_.max_bet_),
        PROTOBUF_FIELD_OFFSET(::ActionOptionsState, _impl_.seat_actions_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::SidePotShortStackPerAmountInfo, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::SidePotShortStackPerAmountInfo, _impl_.short_stack_),
        PROTOBUF_FIELD_OFFSET(::SidePotShortStackPerAmountInfo, _impl_.amount_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::SidePotInfo, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::SidePotInfo, _impl_.short_stack_),
        PROTOBUF_FIELD_OFFSET(::SidePotInfo, _impl_.amount_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::PotInfo, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::PotInfo, _impl_.amount_),
        PROTOBUF_FIELD_OFFSET(::PotInfo, _impl_.side_pots_),
        PROTOBUF_FIELD_OFFSET(::SeatState, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::SeatState, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::SeatState, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::SeatState, _impl_.seat_idx_),
        PROTOBUF_FIELD_OFFSET(::SeatState, _impl_.is_folded_),
        PROTOBUF_FIELD_OFFSET(::SeatState, _impl_.stake_),
        PROTOBUF_FIELD_OFFSET(::SeatState, _impl_.name_),
        PROTOBUF_FIELD_OFFSET(::SeatState, _impl_.user_avatar_),
        PROTOBUF_FIELD_OFFSET(::SeatState, _impl_.bet_),
        PROTOBUF_FIELD_OFFSET(::SeatState, _impl_.is_actions_available_),
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::SeatState, _impl_.cards_),
        PROTOBUF_FIELD_OFFSET(::SeatState, _impl_.action_options_),
        PROTOBUF_FIELD_OFFSET(::SeatState, _impl_.can_muck_),
        PROTOBUF_FIELD_OFFSET(::SeatState, _impl_.is_playing_),
        PROTOBUF_FIELD_OFFSET(::SeatState, _impl_.is_disconnected_),
        PROTOBUF_FIELD_OFFSET(::SeatState, _impl_.in_sitout_),
        PROTOBUF_FIELD_OFFSET(::SeatState, _impl_.can_rebuy_),
        PROTOBUF_FIELD_OFFSET(::SeatState, _impl_.pre_action_options_),
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::SeatState, _impl_.optional_last_action_),
        PROTOBUF_FIELD_OFFSET(::SeatState, _impl_.optional_last_pre_action_),
        PROTOBUF_FIELD_OFFSET(::SeatState, _impl_.optional_kick_reason_),
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        0,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        1,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::TableState, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::TableState, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::TableState, _impl_.nt_type_),
        PROTOBUF_FIELD_OFFSET(::TableState, _impl_.table_id_),
        PROTOBUF_FIELD_OFFSET(::TableState, _impl_.seat_idx_bb_),
        PROTOBUF_FIELD_OFFSET(::TableState, _impl_.seat_idx_sb_),
        PROTOBUF_FIELD_OFFSET(::TableState, _impl_.seat_idx_btn_),
        PROTOBUF_FIELD_OFFSET(::TableState, _impl_.pot_),
        PROTOBUF_FIELD_OFFSET(::TableState, _impl_.bb_amount_),
        PROTOBUF_FIELD_OFFSET(::TableState, _impl_.sb_amount_),
        PROTOBUF_FIELD_OFFSET(::TableState, _impl_.action_time_limit_),
        PROTOBUF_FIELD_OFFSET(::TableState, _impl_.timebank_activated_),
        PROTOBUF_FIELD_OFFSET(::TableState, _impl_.game_state_),
        PROTOBUF_FIELD_OFFSET(::TableState, _impl_.seats_),
        PROTOBUF_FIELD_OFFSET(::TableState, _impl_.community_cards_),
        PROTOBUF_FIELD_OFFSET(::TableState, _impl_.showdown_state_),
        PROTOBUF_FIELD_OFFSET(::TableState, _impl_.my_seat_idx_),
        PROTOBUF_FIELD_OFFSET(::TableState, _impl_.cards_show_state_),
        PROTOBUF_FIELD_OFFSET(::TableState, _impl_.table_name_),
        PROTOBUF_FIELD_OFFSET(::TableState, _impl_.spin_multipliers_),
        PROTOBUF_FIELD_OFFSET(::TableState, _impl_.active_spins_multiplier_),
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        0,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::HandPlayedInfo, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::HandPlayedInfo, _impl_.mongo_hand_id_),
        PROTOBUF_FIELD_OFFSET(::HandPlayedInfo, _impl_.file_name_),
        PROTOBUF_FIELD_OFFSET(::HandPlayedInfo, _impl_.hand_header_),
        PROTOBUF_FIELD_OFFSET(::HandPlayedInfo, _impl_.hand_body_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::PlayerOnShowdownState)},
        {11, -1, -1, sizeof(::PlayerInAllInState)},
        {22, -1, -1, sizeof(::CardsShowState)},
        {31, -1, -1, sizeof(::WinnerState)},
        {42, 53, -1, sizeof(::ShowdownState)},
        {56, -1, -1, sizeof(::PreActionOptionsState)},
        {65, -1, -1, sizeof(::ActionOptionsState)},
        {76, -1, -1, sizeof(::SidePotShortStackPerAmountInfo)},
        {86, -1, -1, sizeof(::SidePotInfo)},
        {96, -1, -1, sizeof(::PotInfo)},
        {106, 135, -1, sizeof(::SeatState)},
        {153, 180, -1, sizeof(::TableState)},
        {199, -1, -1, sizeof(::HandPlayedInfo)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::_PlayerOnShowdownState_default_instance_._instance,
    &::_PlayerInAllInState_default_instance_._instance,
    &::_CardsShowState_default_instance_._instance,
    &::_WinnerState_default_instance_._instance,
    &::_ShowdownState_default_instance_._instance,
    &::_PreActionOptionsState_default_instance_._instance,
    &::_ActionOptionsState_default_instance_._instance,
    &::_SidePotShortStackPerAmountInfo_default_instance_._instance,
    &::_SidePotInfo_default_instance_._instance,
    &::_PotInfo_default_instance_._instance,
    &::_SeatState_default_instance_._instance,
    &::_TableState_default_instance_._instance,
    &::_HandPlayedInfo_default_instance_._instance,
};
const char descriptor_table_protodef_TableState_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\020TableState.proto\"F\n\025PlayerOnShowdownSt"
    "ate\022\020\n\010seat_idx\030\001 \001(\005\022\014\n\004muck\030\002 \001(\010\022\r\n\005c"
    "ards\030\003 \003(\t\"M\n\022PlayerInAllInState\022\020\n\010seat"
    "_idx\030\001 \001(\005\022\r\n\005cards\030\002 \003(\t\022\026\n\016win_percent"
    "age\030\003 \001(\001\">\n\016CardsShowState\022,\n\017player_in"
    "_allin\030\001 \003(\0132\023.PlayerInAllInState\"v\n\013Win"
    "nerState\022\020\n\010seat_idx\030\001 \001(\005\022\024\n\014money_rewa"
    "rd\030\002 \001(\003\022\?\n\026side_pots_short_stacks\030\003 \003(\013"
    "2\037.SidePotShortStackPerAmountInfo\"\215\001\n\rSh"
    "owdownState\022\035\n\007winners\030\001 \003(\0132\014.WinnerSta"
    "te\0222\n\022player_on_showdown\030\002 \003(\0132\026.PlayerO"
    "nShowdownState\022)\n\020hand_played_info\030\003 \001(\013"
    "2\017.HandPlayedInfo\">\n\025PreActionOptionsSta"
    "te\022%\n\020seat_pre_actions\030\001 \003(\0162\013.PreAction"
    "s\"Z\n\022ActionOptionsState\022\017\n\007min_bet\030\001 \001(\003"
    "\022\017\n\007max_bet\030\002 \001(\003\022\"\n\014seat_actions\030\003 \003(\0162"
    "\014.SeatActions\"E\n\036SidePotShortStackPerAmo"
    "untInfo\022\023\n\013short_stack\030\001 \001(\003\022\016\n\006amount\030\002"
    " \001(\003\"2\n\013SidePotInfo\022\023\n\013short_stack\030\001 \001(\003"
    "\022\016\n\006amount\030\002 \001(\003\":\n\007PotInfo\022\016\n\006amount\030\001 "
    "\001(\003\022\037\n\tside_pots\030\002 \003(\0132\014.SidePotInfo\"\204\004\n"
    "\tSeatState\022\020\n\010seat_idx\030\001 \001(\005\022\021\n\tis_folde"
    "d\030\002 \001(\010\022\r\n\005stake\030\003 \001(\003\022\014\n\004name\030\004 \001(\t\022\023\n\013"
    "user_avatar\030\005 \001(\t\022\013\n\003bet\030\006 \001(\003\022\034\n\024is_act"
    "ions_available\030\007 \001(\010\022\025\n\013last_action\030\010 \001("
    "\tH\000\022\r\n\005cards\030\t \003(\t\022+\n\016action_options\030\n \001"
    "(\0132\023.ActionOptionsState\022\020\n\010can_muck\030\013 \001("
    "\010\022\022\n\nis_playing\030\014 \001(\010\022\027\n\017is_disconnected"
    "\030\r \001(\010\022\021\n\tin_sitout\030\016 \001(\010\022\021\n\tcan_rebuy\030\017"
    " \001(\010\0222\n\022pre_action_options\030\020 \001(\0132\026.PreAc"
    "tionOptionsState\022\031\n\017last_pre_action\030\021 \001("
    "\tH\001\022\"\n\013kick_reason\030\022 \001(\0162\013.KickReasonH\002B"
    "\026\n\024optional_last_actionB\032\n\030optional_last"
    "_pre_actionB\026\n\024optional_kick_reason\"\356\003\n\n"
    "TableState\022\017\n\007nt_type\030\001 \001(\005\022\020\n\010table_id\030"
    "\002 \001(\003\022\023\n\013seat_idx_bb\030\003 \001(\005\022\023\n\013seat_idx_s"
    "b\030\004 \001(\005\022\024\n\014seat_idx_btn\030\005 \001(\005\022\025\n\003pot\030\006 \001"
    "(\0132\010.PotInfo\022\021\n\tbb_amount\030\007 \001(\005\022\021\n\tsb_am"
    "ount\030\010 \001(\005\022\031\n\021action_time_limit\030\t \001(\003\022\032\n"
    "\022timebank_activated\030\n \001(\010\022\036\n\ngame_state\030"
    "\013 \001(\0162\n.GameState\022\031\n\005seats\030\014 \003(\0132\n.SeatS"
    "tate\022\027\n\017community_cards\030\r \003(\t\022&\n\016showdow"
    "n_state\030\016 \003(\0132\016.ShowdownState\022\023\n\013my_seat"
    "_idx\030\017 \001(\005\022)\n\020cards_show_state\030\020 \003(\0132\017.C"
    "ardsShowState\022\022\n\ntable_name\030\021 \001(\t\022\030\n\020spi"
    "n_multipliers\030\022 \003(\004\022\037\n\027active_spins_mult"
    "iplier\030\023 \001(\004\"b\n\016HandPlayedInfo\022\025\n\rmongo_"
    "hand_id\030\001 \001(\t\022\021\n\tfile_name\030\002 \001(\t\022\023\n\013hand"
    "_header\030\003 \001(\t\022\021\n\thand_body\030\004 \001(\t*\214\001\n\tGam"
    "eState\022\013\n\007Waiting\020\000\022\013\n\007PreFlop\020\001\022\010\n\004Flop"
    "\020\002\022\010\n\004Turn\020\003\022\t\n\005River\020\004\022\010\n\004Muck\020\005\022\014\n\010Sho"
    "wdown\020\006\022\n\n\006Closed\020\007\022\013\n\007Default\020\010\022\025\n\021Prep"
    "aringNextHand\020\t*c\n\013SeatActions\022\n\n\006PostSB"
    "\020\000\022\n\n\006PostBB\020\001\022\007\n\003Bet\020\002\022\t\n\005Raise\020\003\022\t\n\005Al"
    "lIn\020\004\022\010\n\004Fold\020\005\022\t\n\005Check\020\006\022\010\n\004Call\020\007*Y\n\n"
    "PreActions\022\017\n\013NoPreaction\020\000\022\021\n\rpFoldToAn"
    "yBet\020\001\022\n\n\006pCheck\020\002\022\020\n\014pCheckOrFold\020\003\022\t\n\005"
    "pCall\020\004*\035\n\nKickReason\022\017\n\013SitoutLimit\020\000b\006"
    "proto3"
};
static ::absl::once_flag descriptor_table_TableState_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_TableState_2eproto = {
    false,
    false,
    2326,
    descriptor_table_protodef_TableState_2eproto,
    "TableState.proto",
    &descriptor_table_TableState_2eproto_once,
    nullptr,
    0,
    13,
    schemas,
    file_default_instances,
    TableStruct_TableState_2eproto::offsets,
    file_level_enum_descriptors_TableState_2eproto,
    file_level_service_descriptors_TableState_2eproto,
};
const ::google::protobuf::EnumDescriptor* GameState_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_TableState_2eproto);
  return file_level_enum_descriptors_TableState_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t GameState_internal_data_[] = {
    655360u, 0u, };
bool GameState_IsValid(int value) {
  return 0 <= value && value <= 9;
}
const ::google::protobuf::EnumDescriptor* SeatActions_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_TableState_2eproto);
  return file_level_enum_descriptors_TableState_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t SeatActions_internal_data_[] = {
    524288u, 0u, };
bool SeatActions_IsValid(int value) {
  return 0 <= value && value <= 7;
}
const ::google::protobuf::EnumDescriptor* PreActions_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_TableState_2eproto);
  return file_level_enum_descriptors_TableState_2eproto[2];
}
PROTOBUF_CONSTINIT const uint32_t PreActions_internal_data_[] = {
    327680u, 0u, };
bool PreActions_IsValid(int value) {
  return 0 <= value && value <= 4;
}
const ::google::protobuf::EnumDescriptor* KickReason_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_TableState_2eproto);
  return file_level_enum_descriptors_TableState_2eproto[3];
}
PROTOBUF_CONSTINIT const uint32_t KickReason_internal_data_[] = {
    65536u, 0u, };
bool KickReason_IsValid(int value) {
  return 0 <= value && value <= 0;
}
// ===================================================================

class PlayerOnShowdownState::_Internal {
 public:
};

PlayerOnShowdownState::PlayerOnShowdownState(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlayerOnShowdownState)
}
inline PROTOBUF_NDEBUG_INLINE PlayerOnShowdownState::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::PlayerOnShowdownState& from_msg)
      : cards_{visibility, arena, from.cards_},
        _cached_size_{0} {}

PlayerOnShowdownState::PlayerOnShowdownState(
    ::google::protobuf::Arena* arena,
    const PlayerOnShowdownState& from)
    : ::google::protobuf::Message(arena) {
  PlayerOnShowdownState* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, seat_idx_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, seat_idx_),
           offsetof(Impl_, muck_) -
               offsetof(Impl_, seat_idx_) +
               sizeof(Impl_::muck_));

  // @@protoc_insertion_point(copy_constructor:PlayerOnShowdownState)
}
inline PROTOBUF_NDEBUG_INLINE PlayerOnShowdownState::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : cards_{visibility, arena},
        _cached_size_{0} {}

inline void PlayerOnShowdownState::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, seat_idx_),
           0,
           offsetof(Impl_, muck_) -
               offsetof(Impl_, seat_idx_) +
               sizeof(Impl_::muck_));
}
PlayerOnShowdownState::~PlayerOnShowdownState() {
  // @@protoc_insertion_point(destructor:PlayerOnShowdownState)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void PlayerOnShowdownState::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
PlayerOnShowdownState::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(PlayerOnShowdownState, _impl_._cached_size_),
              false,
          },
          &PlayerOnShowdownState::MergeImpl,
          &PlayerOnShowdownState::kDescriptorMethods,
          &descriptor_table_TableState_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 35, 2> PlayerOnShowdownState::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_PlayerOnShowdownState_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::PlayerOnShowdownState>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 seat_idx = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PlayerOnShowdownState, _impl_.seat_idx_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerOnShowdownState, _impl_.seat_idx_)}},
    // bool muck = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(PlayerOnShowdownState, _impl_.muck_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerOnShowdownState, _impl_.muck_)}},
    // repeated string cards = 3;
    {::_pbi::TcParser::FastUR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerOnShowdownState, _impl_.cards_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 seat_idx = 1;
    {PROTOBUF_FIELD_OFFSET(PlayerOnShowdownState, _impl_.seat_idx_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool muck = 2;
    {PROTOBUF_FIELD_OFFSET(PlayerOnShowdownState, _impl_.muck_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // repeated string cards = 3;
    {PROTOBUF_FIELD_OFFSET(PlayerOnShowdownState, _impl_.cards_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
  }},
  // no aux_entries
  {{
    "\25\0\0\5\0\0\0\0"
    "PlayerOnShowdownState"
    "cards"
  }},
};

PROTOBUF_NOINLINE void PlayerOnShowdownState::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerOnShowdownState)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cards_.Clear();
  ::memset(&_impl_.seat_idx_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.muck_) -
      reinterpret_cast<char*>(&_impl_.seat_idx_)) + sizeof(_impl_.muck_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* PlayerOnShowdownState::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerOnShowdownState)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 seat_idx = 1;
  if (this->_internal_seat_idx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_seat_idx(), target);
  }

  // bool muck = 2;
  if (this->_internal_muck() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_muck(), target);
  }

  // repeated string cards = 3;
  for (int i = 0, n = this->_internal_cards_size(); i < n; ++i) {
    const auto& s = this->_internal_cards().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "PlayerOnShowdownState.cards");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerOnShowdownState)
  return target;
}

::size_t PlayerOnShowdownState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerOnShowdownState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // repeated string cards = 3;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_cards().size());
  for (int i = 0, n = _internal_cards().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_cards().Get(i));
  }
  // int32 seat_idx = 1;
  if (this->_internal_seat_idx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_seat_idx());
  }

  // bool muck = 2;
  if (this->_internal_muck() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void PlayerOnShowdownState::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PlayerOnShowdownState*>(&to_msg);
  auto& from = static_cast<const PlayerOnShowdownState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:PlayerOnShowdownState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_cards()->MergeFrom(from._internal_cards());
  if (from._internal_seat_idx() != 0) {
    _this->_impl_.seat_idx_ = from._impl_.seat_idx_;
  }
  if (from._internal_muck() != 0) {
    _this->_impl_.muck_ = from._impl_.muck_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerOnShowdownState::CopyFrom(const PlayerOnShowdownState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerOnShowdownState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PlayerOnShowdownState::InternalSwap(PlayerOnShowdownState* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.cards_.InternalSwap(&other->_impl_.cards_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerOnShowdownState, _impl_.muck_)
      + sizeof(PlayerOnShowdownState::_impl_.muck_)
      - PROTOBUF_FIELD_OFFSET(PlayerOnShowdownState, _impl_.seat_idx_)>(
          reinterpret_cast<char*>(&_impl_.seat_idx_),
          reinterpret_cast<char*>(&other->_impl_.seat_idx_));
}

::google::protobuf::Metadata PlayerOnShowdownState::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PlayerInAllInState::_Internal {
 public:
};

PlayerInAllInState::PlayerInAllInState(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:PlayerInAllInState)
}
inline PROTOBUF_NDEBUG_INLINE PlayerInAllInState::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::PlayerInAllInState& from_msg)
      : cards_{visibility, arena, from.cards_},
        _cached_size_{0} {}

PlayerInAllInState::PlayerInAllInState(
    ::google::protobuf::Arena* arena,
    const PlayerInAllInState& from)
    : ::google::protobuf::Message(arena) {
  PlayerInAllInState* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, win_percentage_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, win_percentage_),
           offsetof(Impl_, seat_idx_) -
               offsetof(Impl_, win_percentage_) +
               sizeof(Impl_::seat_idx_));

  // @@protoc_insertion_point(copy_constructor:PlayerInAllInState)
}
inline PROTOBUF_NDEBUG_INLINE PlayerInAllInState::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : cards_{visibility, arena},
        _cached_size_{0} {}

inline void PlayerInAllInState::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, win_percentage_),
           0,
           offsetof(Impl_, seat_idx_) -
               offsetof(Impl_, win_percentage_) +
               sizeof(Impl_::seat_idx_));
}
PlayerInAllInState::~PlayerInAllInState() {
  // @@protoc_insertion_point(destructor:PlayerInAllInState)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void PlayerInAllInState::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
PlayerInAllInState::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(PlayerInAllInState, _impl_._cached_size_),
              false,
          },
          &PlayerInAllInState::MergeImpl,
          &PlayerInAllInState::kDescriptorMethods,
          &descriptor_table_TableState_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 32, 2> PlayerInAllInState::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_PlayerInAllInState_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::PlayerInAllInState>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 seat_idx = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PlayerInAllInState, _impl_.seat_idx_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerInAllInState, _impl_.seat_idx_)}},
    // repeated string cards = 2;
    {::_pbi::TcParser::FastUR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerInAllInState, _impl_.cards_)}},
    // double win_percentage = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerInAllInState, _impl_.win_percentage_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 seat_idx = 1;
    {PROTOBUF_FIELD_OFFSET(PlayerInAllInState, _impl_.seat_idx_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // repeated string cards = 2;
    {PROTOBUF_FIELD_OFFSET(PlayerInAllInState, _impl_.cards_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // double win_percentage = 3;
    {PROTOBUF_FIELD_OFFSET(PlayerInAllInState, _impl_.win_percentage_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
    "\22\0\5\0\0\0\0\0"
    "PlayerInAllInState"
    "cards"
  }},
};

PROTOBUF_NOINLINE void PlayerInAllInState::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerInAllInState)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cards_.Clear();
  ::memset(&_impl_.win_percentage_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.seat_idx_) -
      reinterpret_cast<char*>(&_impl_.win_percentage_)) + sizeof(_impl_.seat_idx_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* PlayerInAllInState::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerInAllInState)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 seat_idx = 1;
  if (this->_internal_seat_idx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_seat_idx(), target);
  }

  // repeated string cards = 2;
  for (int i = 0, n = this->_internal_cards_size(); i < n; ++i) {
    const auto& s = this->_internal_cards().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "PlayerInAllInState.cards");
    target = stream->WriteString(2, s, target);
  }

  // double win_percentage = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_win_percentage = this->_internal_win_percentage();
  ::uint64_t raw_win_percentage;
  memcpy(&raw_win_percentage, &tmp_win_percentage, sizeof(tmp_win_percentage));
  if (raw_win_percentage != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_win_percentage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerInAllInState)
  return target;
}

::size_t PlayerInAllInState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerInAllInState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // repeated string cards = 2;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_cards().size());
  for (int i = 0, n = _internal_cards().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_cards().Get(i));
  }
  // double win_percentage = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_win_percentage = this->_internal_win_percentage();
  ::uint64_t raw_win_percentage;
  memcpy(&raw_win_percentage, &tmp_win_percentage, sizeof(tmp_win_percentage));
  if (raw_win_percentage != 0) {
    total_size += 9;
  }

  // int32 seat_idx = 1;
  if (this->_internal_seat_idx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_seat_idx());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void PlayerInAllInState::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PlayerInAllInState*>(&to_msg);
  auto& from = static_cast<const PlayerInAllInState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:PlayerInAllInState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_cards()->MergeFrom(from._internal_cards());
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_win_percentage = from._internal_win_percentage();
  ::uint64_t raw_win_percentage;
  memcpy(&raw_win_percentage, &tmp_win_percentage, sizeof(tmp_win_percentage));
  if (raw_win_percentage != 0) {
    _this->_impl_.win_percentage_ = from._impl_.win_percentage_;
  }
  if (from._internal_seat_idx() != 0) {
    _this->_impl_.seat_idx_ = from._impl_.seat_idx_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerInAllInState::CopyFrom(const PlayerInAllInState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerInAllInState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PlayerInAllInState::InternalSwap(PlayerInAllInState* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.cards_.InternalSwap(&other->_impl_.cards_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerInAllInState, _impl_.seat_idx_)
      + sizeof(PlayerInAllInState::_impl_.seat_idx_)
      - PROTOBUF_FIELD_OFFSET(PlayerInAllInState, _impl_.win_percentage_)>(
          reinterpret_cast<char*>(&_impl_.win_percentage_),
          reinterpret_cast<char*>(&other->_impl_.win_percentage_));
}

::google::protobuf::Metadata PlayerInAllInState::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CardsShowState::_Internal {
 public:
};

CardsShowState::CardsShowState(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CardsShowState)
}
inline PROTOBUF_NDEBUG_INLINE CardsShowState::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::CardsShowState& from_msg)
      : player_in_allin_{visibility, arena, from.player_in_allin_},
        _cached_size_{0} {}

CardsShowState::CardsShowState(
    ::google::protobuf::Arena* arena,
    const CardsShowState& from)
    : ::google::protobuf::Message(arena) {
  CardsShowState* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:CardsShowState)
}
inline PROTOBUF_NDEBUG_INLINE CardsShowState::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : player_in_allin_{visibility, arena},
        _cached_size_{0} {}

inline void CardsShowState::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
CardsShowState::~CardsShowState() {
  // @@protoc_insertion_point(destructor:CardsShowState)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CardsShowState::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
CardsShowState::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(CardsShowState, _impl_._cached_size_),
              false,
          },
          &CardsShowState::MergeImpl,
          &CardsShowState::kDescriptorMethods,
          &descriptor_table_TableState_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> CardsShowState::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CardsShowState_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CardsShowState>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .PlayerInAllInState player_in_allin = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(CardsShowState, _impl_.player_in_allin_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .PlayerInAllInState player_in_allin = 1;
    {PROTOBUF_FIELD_OFFSET(CardsShowState, _impl_.player_in_allin_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::PlayerInAllInState>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void CardsShowState::Clear() {
// @@protoc_insertion_point(message_clear_start:CardsShowState)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.player_in_allin_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* CardsShowState::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CardsShowState)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .PlayerInAllInState player_in_allin = 1;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_player_in_allin_size());
       i < n; i++) {
    const auto& repfield = this->_internal_player_in_allin().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            1, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CardsShowState)
  return target;
}

::size_t CardsShowState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CardsShowState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // repeated .PlayerInAllInState player_in_allin = 1;
  total_size += 1UL * this->_internal_player_in_allin_size();
  for (const auto& msg : this->_internal_player_in_allin()) {
    total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void CardsShowState::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CardsShowState*>(&to_msg);
  auto& from = static_cast<const CardsShowState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CardsShowState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_player_in_allin()->MergeFrom(
      from._internal_player_in_allin());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CardsShowState::CopyFrom(const CardsShowState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CardsShowState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CardsShowState::InternalSwap(CardsShowState* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.player_in_allin_.InternalSwap(&other->_impl_.player_in_allin_);
}

::google::protobuf::Metadata CardsShowState::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class WinnerState::_Internal {
 public:
};

WinnerState::WinnerState(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:WinnerState)
}
inline PROTOBUF_NDEBUG_INLINE WinnerState::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::WinnerState& from_msg)
      : side_pots_short_stacks_{visibility, arena, from.side_pots_short_stacks_},
        _cached_size_{0} {}

WinnerState::WinnerState(
    ::google::protobuf::Arena* arena,
    const WinnerState& from)
    : ::google::protobuf::Message(arena) {
  WinnerState* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, money_reward_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, money_reward_),
           offsetof(Impl_, seat_idx_) -
               offsetof(Impl_, money_reward_) +
               sizeof(Impl_::seat_idx_));

  // @@protoc_insertion_point(copy_constructor:WinnerState)
}
inline PROTOBUF_NDEBUG_INLINE WinnerState::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : side_pots_short_stacks_{visibility, arena},
        _cached_size_{0} {}

inline void WinnerState::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, money_reward_),
           0,
           offsetof(Impl_, seat_idx_) -
               offsetof(Impl_, money_reward_) +
               sizeof(Impl_::seat_idx_));
}
WinnerState::~WinnerState() {
  // @@protoc_insertion_point(destructor:WinnerState)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void WinnerState::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
WinnerState::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(WinnerState, _impl_._cached_size_),
              false,
          },
          &WinnerState::MergeImpl,
          &WinnerState::kDescriptorMethods,
          &descriptor_table_TableState_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 0, 2> WinnerState::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_WinnerState_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::WinnerState>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 seat_idx = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(WinnerState, _impl_.seat_idx_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(WinnerState, _impl_.seat_idx_)}},
    // int64 money_reward = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(WinnerState, _impl_.money_reward_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(WinnerState, _impl_.money_reward_)}},
    // repeated .SidePotShortStackPerAmountInfo side_pots_short_stacks = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(WinnerState, _impl_.side_pots_short_stacks_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 seat_idx = 1;
    {PROTOBUF_FIELD_OFFSET(WinnerState, _impl_.seat_idx_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int64 money_reward = 2;
    {PROTOBUF_FIELD_OFFSET(WinnerState, _impl_.money_reward_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // repeated .SidePotShortStackPerAmountInfo side_pots_short_stacks = 3;
    {PROTOBUF_FIELD_OFFSET(WinnerState, _impl_.side_pots_short_stacks_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::SidePotShortStackPerAmountInfo>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void WinnerState::Clear() {
// @@protoc_insertion_point(message_clear_start:WinnerState)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.side_pots_short_stacks_.Clear();
  ::memset(&_impl_.money_reward_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.seat_idx_) -
      reinterpret_cast<char*>(&_impl_.money_reward_)) + sizeof(_impl_.seat_idx_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* WinnerState::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:WinnerState)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 seat_idx = 1;
  if (this->_internal_seat_idx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_seat_idx(), target);
  }

  // int64 money_reward = 2;
  if (this->_internal_money_reward() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<2>(
            stream, this->_internal_money_reward(), target);
  }

  // repeated .SidePotShortStackPerAmountInfo side_pots_short_stacks = 3;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_side_pots_short_stacks_size());
       i < n; i++) {
    const auto& repfield = this->_internal_side_pots_short_stacks().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            3, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WinnerState)
  return target;
}

::size_t WinnerState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WinnerState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // repeated .SidePotShortStackPerAmountInfo side_pots_short_stacks = 3;
  total_size += 1UL * this->_internal_side_pots_short_stacks_size();
  for (const auto& msg : this->_internal_side_pots_short_stacks()) {
    total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // int64 money_reward = 2;
  if (this->_internal_money_reward() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_money_reward());
  }

  // int32 seat_idx = 1;
  if (this->_internal_seat_idx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_seat_idx());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void WinnerState::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<WinnerState*>(&to_msg);
  auto& from = static_cast<const WinnerState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:WinnerState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_side_pots_short_stacks()->MergeFrom(
      from._internal_side_pots_short_stacks());
  if (from._internal_money_reward() != 0) {
    _this->_impl_.money_reward_ = from._impl_.money_reward_;
  }
  if (from._internal_seat_idx() != 0) {
    _this->_impl_.seat_idx_ = from._impl_.seat_idx_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void WinnerState::CopyFrom(const WinnerState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WinnerState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void WinnerState::InternalSwap(WinnerState* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.side_pots_short_stacks_.InternalSwap(&other->_impl_.side_pots_short_stacks_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WinnerState, _impl_.seat_idx_)
      + sizeof(WinnerState::_impl_.seat_idx_)
      - PROTOBUF_FIELD_OFFSET(WinnerState, _impl_.money_reward_)>(
          reinterpret_cast<char*>(&_impl_.money_reward_),
          reinterpret_cast<char*>(&other->_impl_.money_reward_));
}

::google::protobuf::Metadata WinnerState::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ShowdownState::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ShowdownState>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ShowdownState, _impl_._has_bits_);
};

ShowdownState::ShowdownState(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ShowdownState)
}
inline PROTOBUF_NDEBUG_INLINE ShowdownState::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::ShowdownState& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        winners_{visibility, arena, from.winners_},
        player_on_showdown_{visibility, arena, from.player_on_showdown_} {}

ShowdownState::ShowdownState(
    ::google::protobuf::Arena* arena,
    const ShowdownState& from)
    : ::google::protobuf::Message(arena) {
  ShowdownState* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.hand_played_info_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::HandPlayedInfo>(
                              arena, *from._impl_.hand_played_info_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:ShowdownState)
}
inline PROTOBUF_NDEBUG_INLINE ShowdownState::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        winners_{visibility, arena},
        player_on_showdown_{visibility, arena} {}

inline void ShowdownState::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.hand_played_info_ = {};
}
ShowdownState::~ShowdownState() {
  // @@protoc_insertion_point(destructor:ShowdownState)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ShowdownState::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.hand_played_info_;
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
ShowdownState::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(ShowdownState, _impl_._cached_size_),
              false,
          },
          &ShowdownState::MergeImpl,
          &ShowdownState::kDescriptorMethods,
          &descriptor_table_TableState_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2> ShowdownState::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ShowdownState, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ShowdownState_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::ShowdownState>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .WinnerState winners = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ShowdownState, _impl_.winners_)}},
    // repeated .PlayerOnShowdownState player_on_showdown = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(ShowdownState, _impl_.player_on_showdown_)}},
    // .HandPlayedInfo hand_played_info = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 2, PROTOBUF_FIELD_OFFSET(ShowdownState, _impl_.hand_played_info_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .WinnerState winners = 1;
    {PROTOBUF_FIELD_OFFSET(ShowdownState, _impl_.winners_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .PlayerOnShowdownState player_on_showdown = 2;
    {PROTOBUF_FIELD_OFFSET(ShowdownState, _impl_.player_on_showdown_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .HandPlayedInfo hand_played_info = 3;
    {PROTOBUF_FIELD_OFFSET(ShowdownState, _impl_.hand_played_info_), _Internal::kHasBitsOffset + 0, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::WinnerState>()},
    {::_pbi::TcParser::GetTable<::PlayerOnShowdownState>()},
    {::_pbi::TcParser::GetTable<::HandPlayedInfo>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void ShowdownState::Clear() {
// @@protoc_insertion_point(message_clear_start:ShowdownState)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.winners_.Clear();
  _impl_.player_on_showdown_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.hand_played_info_ != nullptr);
    _impl_.hand_played_info_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* ShowdownState::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ShowdownState)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .WinnerState winners = 1;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_winners_size());
       i < n; i++) {
    const auto& repfield = this->_internal_winners().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            1, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // repeated .PlayerOnShowdownState player_on_showdown = 2;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_player_on_showdown_size());
       i < n; i++) {
    const auto& repfield = this->_internal_player_on_showdown().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            2, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .HandPlayedInfo hand_played_info = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, *_impl_.hand_played_info_, _impl_.hand_played_info_->GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ShowdownState)
  return target;
}

::size_t ShowdownState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ShowdownState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // repeated .WinnerState winners = 1;
  total_size += 1UL * this->_internal_winners_size();
  for (const auto& msg : this->_internal_winners()) {
    total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .PlayerOnShowdownState player_on_showdown = 2;
  total_size += 1UL * this->_internal_player_on_showdown_size();
  for (const auto& msg : this->_internal_player_on_showdown()) {
    total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // .HandPlayedInfo hand_played_info = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.hand_played_info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void ShowdownState::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ShowdownState*>(&to_msg);
  auto& from = static_cast<const ShowdownState&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:ShowdownState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_winners()->MergeFrom(
      from._internal_winners());
  _this->_internal_mutable_player_on_showdown()->MergeFrom(
      from._internal_player_on_showdown());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.hand_played_info_ != nullptr);
    if (_this->_impl_.hand_played_info_ == nullptr) {
      _this->_impl_.hand_played_info_ =
          ::google::protobuf::Message::CopyConstruct<::HandPlayedInfo>(arena, *from._impl_.hand_played_info_);
    } else {
      _this->_impl_.hand_played_info_->MergeFrom(*from._impl_.hand_played_info_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ShowdownState::CopyFrom(const ShowdownState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ShowdownState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ShowdownState::InternalSwap(ShowdownState* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.winners_.InternalSwap(&other->_impl_.winners_);
  _impl_.player_on_showdown_.InternalSwap(&other->_impl_.player_on_showdown_);
  swap(_impl_.hand_played_info_, other->_impl_.hand_played_info_);
}

::google::protobuf::Metadata ShowdownState::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PreActionOptionsState::_Internal {
 public:
};

PreActionOptionsState::PreActionOptionsState(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:PreActionOptionsState)
}
inline PROTOBUF_NDEBUG_INLINE PreActionOptionsState::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::PreActionOptionsState& from_msg)
      : seat_pre_actions_{visibility, arena, from.seat_pre_actions_},
        _seat_pre_actions_cached_byte_size_{0},
        _cached_size_{0} {}

PreActionOptionsState::PreActionOptionsState(
    ::google::protobuf::Arena* arena,
    const PreActionOptionsState& from)
    : ::google::protobuf::Message(arena) {
  PreActionOptionsState* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:PreActionOptionsState)
}
inline PROTOBUF_NDEBUG_INLINE PreActionOptionsState::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : seat_pre_actions_{visibility, arena},
        _seat_pre_actions_cached_byte_size_{0},
        _cached_size_{0} {}

inline void PreActionOptionsState::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
PreActionOptionsState::~PreActionOptionsState() {
  // @@protoc_insertion_point(destructor:PreActionOptionsState)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void PreActionOptionsState::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
PreActionOptionsState::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(PreActionOptionsState, _impl_._cached_size_),
              false,
          },
          &PreActionOptionsState::MergeImpl,
          &PreActionOptionsState::kDescriptorMethods,
          &descriptor_table_TableState_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> PreActionOptionsState::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_PreActionOptionsState_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::PreActionOptionsState>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .PreActions seat_pre_actions = 1;
    {::_pbi::TcParser::FastV32P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(PreActionOptionsState, _impl_.seat_pre_actions_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .PreActions seat_pre_actions = 1;
    {PROTOBUF_FIELD_OFFSET(PreActionOptionsState, _impl_.seat_pre_actions_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedOpenEnum)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void PreActionOptionsState::Clear() {
// @@protoc_insertion_point(message_clear_start:PreActionOptionsState)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.seat_pre_actions_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* PreActionOptionsState::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PreActionOptionsState)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .PreActions seat_pre_actions = 1;
  {
    std::size_t byte_size = _impl_._seat_pre_actions_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(1, _internal_seat_pre_actions(),
                                       byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PreActionOptionsState)
  return target;
}

::size_t PreActionOptionsState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PreActionOptionsState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // repeated .PreActions seat_pre_actions = 1;
  {
    std::size_t data_size = 0;
    auto count = static_cast<std::size_t>(this->_internal_seat_pre_actions_size());

    for (std::size_t i = 0; i < count; ++i) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
          this->_internal_seat_pre_actions().Get(static_cast<int>(i)));
    }
    total_size += data_size;
    if (data_size > 0) {
      total_size += 1;
      total_size += ::_pbi::WireFormatLite::Int32Size(
          static_cast<int32_t>(data_size));
    }
    _impl_._seat_pre_actions_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void PreActionOptionsState::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PreActionOptionsState*>(&to_msg);
  auto& from = static_cast<const PreActionOptionsState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:PreActionOptionsState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_seat_pre_actions()->MergeFrom(from._internal_seat_pre_actions());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PreActionOptionsState::CopyFrom(const PreActionOptionsState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PreActionOptionsState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PreActionOptionsState::InternalSwap(PreActionOptionsState* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.seat_pre_actions_.InternalSwap(&other->_impl_.seat_pre_actions_);
}

::google::protobuf::Metadata PreActionOptionsState::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ActionOptionsState::_Internal {
 public:
};

ActionOptionsState::ActionOptionsState(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ActionOptionsState)
}
inline PROTOBUF_NDEBUG_INLINE ActionOptionsState::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::ActionOptionsState& from_msg)
      : seat_actions_{visibility, arena, from.seat_actions_},
        _seat_actions_cached_byte_size_{0},
        _cached_size_{0} {}

ActionOptionsState::ActionOptionsState(
    ::google::protobuf::Arena* arena,
    const ActionOptionsState& from)
    : ::google::protobuf::Message(arena) {
  ActionOptionsState* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, min_bet_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, min_bet_),
           offsetof(Impl_, max_bet_) -
               offsetof(Impl_, min_bet_) +
               sizeof(Impl_::max_bet_));

  // @@protoc_insertion_point(copy_constructor:ActionOptionsState)
}
inline PROTOBUF_NDEBUG_INLINE ActionOptionsState::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : seat_actions_{visibility, arena},
        _seat_actions_cached_byte_size_{0},
        _cached_size_{0} {}

inline void ActionOptionsState::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, min_bet_),
           0,
           offsetof(Impl_, max_bet_) -
               offsetof(Impl_, min_bet_) +
               sizeof(Impl_::max_bet_));
}
ActionOptionsState::~ActionOptionsState() {
  // @@protoc_insertion_point(destructor:ActionOptionsState)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ActionOptionsState::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
ActionOptionsState::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(ActionOptionsState, _impl_._cached_size_),
              false,
          },
          &ActionOptionsState::MergeImpl,
          &ActionOptionsState::kDescriptorMethods,
          &descriptor_table_TableState_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> ActionOptionsState::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_ActionOptionsState_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::ActionOptionsState>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int64 min_bet = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(ActionOptionsState, _impl_.min_bet_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(ActionOptionsState, _impl_.min_bet_)}},
    // int64 max_bet = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(ActionOptionsState, _impl_.max_bet_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(ActionOptionsState, _impl_.max_bet_)}},
    // repeated .SeatActions seat_actions = 3;
    {::_pbi::TcParser::FastV32P1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(ActionOptionsState, _impl_.seat_actions_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int64 min_bet = 1;
    {PROTOBUF_FIELD_OFFSET(ActionOptionsState, _impl_.min_bet_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int64 max_bet = 2;
    {PROTOBUF_FIELD_OFFSET(ActionOptionsState, _impl_.max_bet_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // repeated .SeatActions seat_actions = 3;
    {PROTOBUF_FIELD_OFFSET(ActionOptionsState, _impl_.seat_actions_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedOpenEnum)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void ActionOptionsState::Clear() {
// @@protoc_insertion_point(message_clear_start:ActionOptionsState)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.seat_actions_.Clear();
  ::memset(&_impl_.min_bet_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.max_bet_) -
      reinterpret_cast<char*>(&_impl_.min_bet_)) + sizeof(_impl_.max_bet_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* ActionOptionsState::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ActionOptionsState)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int64 min_bet = 1;
  if (this->_internal_min_bet() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<1>(
            stream, this->_internal_min_bet(), target);
  }

  // int64 max_bet = 2;
  if (this->_internal_max_bet() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<2>(
            stream, this->_internal_max_bet(), target);
  }

  // repeated .SeatActions seat_actions = 3;
  {
    std::size_t byte_size = _impl_._seat_actions_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(3, _internal_seat_actions(),
                                       byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ActionOptionsState)
  return target;
}

::size_t ActionOptionsState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ActionOptionsState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // repeated .SeatActions seat_actions = 3;
  {
    std::size_t data_size = 0;
    auto count = static_cast<std::size_t>(this->_internal_seat_actions_size());

    for (std::size_t i = 0; i < count; ++i) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
          this->_internal_seat_actions().Get(static_cast<int>(i)));
    }
    total_size += data_size;
    if (data_size > 0) {
      total_size += 1;
      total_size += ::_pbi::WireFormatLite::Int32Size(
          static_cast<int32_t>(data_size));
    }
    _impl_._seat_actions_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
  }
  // int64 min_bet = 1;
  if (this->_internal_min_bet() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_min_bet());
  }

  // int64 max_bet = 2;
  if (this->_internal_max_bet() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_max_bet());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void ActionOptionsState::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ActionOptionsState*>(&to_msg);
  auto& from = static_cast<const ActionOptionsState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ActionOptionsState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_seat_actions()->MergeFrom(from._internal_seat_actions());
  if (from._internal_min_bet() != 0) {
    _this->_impl_.min_bet_ = from._impl_.min_bet_;
  }
  if (from._internal_max_bet() != 0) {
    _this->_impl_.max_bet_ = from._impl_.max_bet_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ActionOptionsState::CopyFrom(const ActionOptionsState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ActionOptionsState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ActionOptionsState::InternalSwap(ActionOptionsState* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.seat_actions_.InternalSwap(&other->_impl_.seat_actions_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ActionOptionsState, _impl_.max_bet_)
      + sizeof(ActionOptionsState::_impl_.max_bet_)
      - PROTOBUF_FIELD_OFFSET(ActionOptionsState, _impl_.min_bet_)>(
          reinterpret_cast<char*>(&_impl_.min_bet_),
          reinterpret_cast<char*>(&other->_impl_.min_bet_));
}

::google::protobuf::Metadata ActionOptionsState::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SidePotShortStackPerAmountInfo::_Internal {
 public:
};

SidePotShortStackPerAmountInfo::SidePotShortStackPerAmountInfo(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:SidePotShortStackPerAmountInfo)
}
SidePotShortStackPerAmountInfo::SidePotShortStackPerAmountInfo(
    ::google::protobuf::Arena* arena, const SidePotShortStackPerAmountInfo& from)
    : SidePotShortStackPerAmountInfo(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE SidePotShortStackPerAmountInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SidePotShortStackPerAmountInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, short_stack_),
           0,
           offsetof(Impl_, amount_) -
               offsetof(Impl_, short_stack_) +
               sizeof(Impl_::amount_));
}
SidePotShortStackPerAmountInfo::~SidePotShortStackPerAmountInfo() {
  // @@protoc_insertion_point(destructor:SidePotShortStackPerAmountInfo)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SidePotShortStackPerAmountInfo::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
SidePotShortStackPerAmountInfo::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(SidePotShortStackPerAmountInfo, _impl_._cached_size_),
              false,
          },
          &SidePotShortStackPerAmountInfo::MergeImpl,
          &SidePotShortStackPerAmountInfo::kDescriptorMethods,
          &descriptor_table_TableState_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> SidePotShortStackPerAmountInfo::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_SidePotShortStackPerAmountInfo_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::SidePotShortStackPerAmountInfo>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int64 amount = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(SidePotShortStackPerAmountInfo, _impl_.amount_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(SidePotShortStackPerAmountInfo, _impl_.amount_)}},
    // int64 short_stack = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(SidePotShortStackPerAmountInfo, _impl_.short_stack_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(SidePotShortStackPerAmountInfo, _impl_.short_stack_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int64 short_stack = 1;
    {PROTOBUF_FIELD_OFFSET(SidePotShortStackPerAmountInfo, _impl_.short_stack_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int64 amount = 2;
    {PROTOBUF_FIELD_OFFSET(SidePotShortStackPerAmountInfo, _impl_.amount_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void SidePotShortStackPerAmountInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:SidePotShortStackPerAmountInfo)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.short_stack_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.amount_) -
      reinterpret_cast<char*>(&_impl_.short_stack_)) + sizeof(_impl_.amount_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* SidePotShortStackPerAmountInfo::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SidePotShortStackPerAmountInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int64 short_stack = 1;
  if (this->_internal_short_stack() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<1>(
            stream, this->_internal_short_stack(), target);
  }

  // int64 amount = 2;
  if (this->_internal_amount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<2>(
            stream, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SidePotShortStackPerAmountInfo)
  return target;
}

::size_t SidePotShortStackPerAmountInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SidePotShortStackPerAmountInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // int64 short_stack = 1;
  if (this->_internal_short_stack() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_short_stack());
  }

  // int64 amount = 2;
  if (this->_internal_amount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_amount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void SidePotShortStackPerAmountInfo::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SidePotShortStackPerAmountInfo*>(&to_msg);
  auto& from = static_cast<const SidePotShortStackPerAmountInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SidePotShortStackPerAmountInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_short_stack() != 0) {
    _this->_impl_.short_stack_ = from._impl_.short_stack_;
  }
  if (from._internal_amount() != 0) {
    _this->_impl_.amount_ = from._impl_.amount_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SidePotShortStackPerAmountInfo::CopyFrom(const SidePotShortStackPerAmountInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SidePotShortStackPerAmountInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SidePotShortStackPerAmountInfo::InternalSwap(SidePotShortStackPerAmountInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SidePotShortStackPerAmountInfo, _impl_.amount_)
      + sizeof(SidePotShortStackPerAmountInfo::_impl_.amount_)
      - PROTOBUF_FIELD_OFFSET(SidePotShortStackPerAmountInfo, _impl_.short_stack_)>(
          reinterpret_cast<char*>(&_impl_.short_stack_),
          reinterpret_cast<char*>(&other->_impl_.short_stack_));
}

::google::protobuf::Metadata SidePotShortStackPerAmountInfo::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SidePotInfo::_Internal {
 public:
};

SidePotInfo::SidePotInfo(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:SidePotInfo)
}
SidePotInfo::SidePotInfo(
    ::google::protobuf::Arena* arena, const SidePotInfo& from)
    : SidePotInfo(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE SidePotInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SidePotInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, short_stack_),
           0,
           offsetof(Impl_, amount_) -
               offsetof(Impl_, short_stack_) +
               sizeof(Impl_::amount_));
}
SidePotInfo::~SidePotInfo() {
  // @@protoc_insertion_point(destructor:SidePotInfo)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SidePotInfo::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
SidePotInfo::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(SidePotInfo, _impl_._cached_size_),
              false,
          },
          &SidePotInfo::MergeImpl,
          &SidePotInfo::kDescriptorMethods,
          &descriptor_table_TableState_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> SidePotInfo::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_SidePotInfo_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::SidePotInfo>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int64 amount = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(SidePotInfo, _impl_.amount_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(SidePotInfo, _impl_.amount_)}},
    // int64 short_stack = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(SidePotInfo, _impl_.short_stack_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(SidePotInfo, _impl_.short_stack_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int64 short_stack = 1;
    {PROTOBUF_FIELD_OFFSET(SidePotInfo, _impl_.short_stack_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int64 amount = 2;
    {PROTOBUF_FIELD_OFFSET(SidePotInfo, _impl_.amount_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void SidePotInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:SidePotInfo)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.short_stack_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.amount_) -
      reinterpret_cast<char*>(&_impl_.short_stack_)) + sizeof(_impl_.amount_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* SidePotInfo::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SidePotInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int64 short_stack = 1;
  if (this->_internal_short_stack() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<1>(
            stream, this->_internal_short_stack(), target);
  }

  // int64 amount = 2;
  if (this->_internal_amount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<2>(
            stream, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SidePotInfo)
  return target;
}

::size_t SidePotInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SidePotInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // int64 short_stack = 1;
  if (this->_internal_short_stack() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_short_stack());
  }

  // int64 amount = 2;
  if (this->_internal_amount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_amount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void SidePotInfo::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SidePotInfo*>(&to_msg);
  auto& from = static_cast<const SidePotInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SidePotInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_short_stack() != 0) {
    _this->_impl_.short_stack_ = from._impl_.short_stack_;
  }
  if (from._internal_amount() != 0) {
    _this->_impl_.amount_ = from._impl_.amount_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SidePotInfo::CopyFrom(const SidePotInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SidePotInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SidePotInfo::InternalSwap(SidePotInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SidePotInfo, _impl_.amount_)
      + sizeof(SidePotInfo::_impl_.amount_)
      - PROTOBUF_FIELD_OFFSET(SidePotInfo, _impl_.short_stack_)>(
          reinterpret_cast<char*>(&_impl_.short_stack_),
          reinterpret_cast<char*>(&other->_impl_.short_stack_));
}

::google::protobuf::Metadata SidePotInfo::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PotInfo::_Internal {
 public:
};

PotInfo::PotInfo(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:PotInfo)
}
inline PROTOBUF_NDEBUG_INLINE PotInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::PotInfo& from_msg)
      : side_pots_{visibility, arena, from.side_pots_},
        _cached_size_{0} {}

PotInfo::PotInfo(
    ::google::protobuf::Arena* arena,
    const PotInfo& from)
    : ::google::protobuf::Message(arena) {
  PotInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.amount_ = from._impl_.amount_;

  // @@protoc_insertion_point(copy_constructor:PotInfo)
}
inline PROTOBUF_NDEBUG_INLINE PotInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : side_pots_{visibility, arena},
        _cached_size_{0} {}

inline void PotInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.amount_ = {};
}
PotInfo::~PotInfo() {
  // @@protoc_insertion_point(destructor:PotInfo)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void PotInfo::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
PotInfo::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(PotInfo, _impl_._cached_size_),
              false,
          },
          &PotInfo::MergeImpl,
          &PotInfo::kDescriptorMethods,
          &descriptor_table_TableState_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> PotInfo::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_PotInfo_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::PotInfo>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .SidePotInfo side_pots = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(PotInfo, _impl_.side_pots_)}},
    // int64 amount = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(PotInfo, _impl_.amount_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(PotInfo, _impl_.amount_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int64 amount = 1;
    {PROTOBUF_FIELD_OFFSET(PotInfo, _impl_.amount_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // repeated .SidePotInfo side_pots = 2;
    {PROTOBUF_FIELD_OFFSET(PotInfo, _impl_.side_pots_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::SidePotInfo>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void PotInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PotInfo)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.side_pots_.Clear();
  _impl_.amount_ = ::int64_t{0};
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* PotInfo::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PotInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int64 amount = 1;
  if (this->_internal_amount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<1>(
            stream, this->_internal_amount(), target);
  }

  // repeated .SidePotInfo side_pots = 2;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_side_pots_size());
       i < n; i++) {
    const auto& repfield = this->_internal_side_pots().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            2, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PotInfo)
  return target;
}

::size_t PotInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PotInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // repeated .SidePotInfo side_pots = 2;
  total_size += 1UL * this->_internal_side_pots_size();
  for (const auto& msg : this->_internal_side_pots()) {
    total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // int64 amount = 1;
  if (this->_internal_amount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_amount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void PotInfo::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PotInfo*>(&to_msg);
  auto& from = static_cast<const PotInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:PotInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_side_pots()->MergeFrom(
      from._internal_side_pots());
  if (from._internal_amount() != 0) {
    _this->_impl_.amount_ = from._impl_.amount_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PotInfo::CopyFrom(const PotInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PotInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PotInfo::InternalSwap(PotInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.side_pots_.InternalSwap(&other->_impl_.side_pots_);
        swap(_impl_.amount_, other->_impl_.amount_);
}

::google::protobuf::Metadata PotInfo::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SeatState::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SeatState>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SeatState, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::SeatState, _impl_._oneof_case_);
};

SeatState::SeatState(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:SeatState)
}
inline PROTOBUF_NDEBUG_INLINE SeatState::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::SeatState& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        cards_{visibility, arena, from.cards_},
        name_(arena, from.name_),
        user_avatar_(arena, from.user_avatar_),
        optional_last_action_{},
        optional_last_pre_action_{},
        optional_kick_reason_{},
        _oneof_case_{from._oneof_case_[0], from._oneof_case_[1], from._oneof_case_[2]} {}

SeatState::SeatState(
    ::google::protobuf::Arena* arena,
    const SeatState& from)
    : ::google::protobuf::Message(arena) {
  SeatState* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.action_options_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::ActionOptionsState>(
                              arena, *from._impl_.action_options_)
                        : nullptr;
  _impl_.pre_action_options_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::PreActionOptionsState>(
                              arena, *from._impl_.pre_action_options_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, stake_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, stake_),
           offsetof(Impl_, can_rebuy_) -
               offsetof(Impl_, stake_) +
               sizeof(Impl_::can_rebuy_));
  switch (optional_last_action_case()) {
    case OPTIONAL_LAST_ACTION_NOT_SET:
      break;
      case kLastAction:
        new (&_impl_.optional_last_action_.last_action_) decltype(_impl_.optional_last_action_.last_action_){arena, from._impl_.optional_last_action_.last_action_};
        break;
  }
  switch (optional_last_pre_action_case()) {
    case OPTIONAL_LAST_PRE_ACTION_NOT_SET:
      break;
      case kLastPreAction:
        new (&_impl_.optional_last_pre_action_.last_pre_action_) decltype(_impl_.optional_last_pre_action_.last_pre_action_){arena, from._impl_.optional_last_pre_action_.last_pre_action_};
        break;
  }
  switch (optional_kick_reason_case()) {
    case OPTIONAL_KICK_REASON_NOT_SET:
      break;
      case kKickReason:
        _impl_.optional_kick_reason_.kick_reason_ = from._impl_.optional_kick_reason_.kick_reason_;
        break;
  }

  // @@protoc_insertion_point(copy_constructor:SeatState)
}
inline PROTOBUF_NDEBUG_INLINE SeatState::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        cards_{visibility, arena},
        name_(arena),
        user_avatar_(arena),
        optional_last_action_{},
        optional_last_pre_action_{},
        optional_kick_reason_{},
        _oneof_case_{} {}

inline void SeatState::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, action_options_),
           0,
           offsetof(Impl_, can_rebuy_) -
               offsetof(Impl_, action_options_) +
               sizeof(Impl_::can_rebuy_));
}
SeatState::~SeatState() {
  // @@protoc_insertion_point(destructor:SeatState)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SeatState::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.name_.Destroy();
  _impl_.user_avatar_.Destroy();
  delete _impl_.action_options_;
  delete _impl_.pre_action_options_;
  if (has_optional_last_action()) {
    clear_optional_last_action();
  }
  if (has_optional_last_pre_action()) {
    clear_optional_last_pre_action();
  }
  if (has_optional_kick_reason()) {
    clear_optional_kick_reason();
  }
  _impl_.~Impl_();
}

void SeatState::clear_optional_last_action() {
// @@protoc_insertion_point(one_of_clear_start:SeatState)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (optional_last_action_case()) {
    case kLastAction: {
      _impl_.optional_last_action_.last_action_.Destroy();
      break;
    }
    case OPTIONAL_LAST_ACTION_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = OPTIONAL_LAST_ACTION_NOT_SET;
}

void SeatState::clear_optional_last_pre_action() {
// @@protoc_insertion_point(one_of_clear_start:SeatState)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (optional_last_pre_action_case()) {
    case kLastPreAction: {
      _impl_.optional_last_pre_action_.last_pre_action_.Destroy();
      break;
    }
    case OPTIONAL_LAST_PRE_ACTION_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[1] = OPTIONAL_LAST_PRE_ACTION_NOT_SET;
}

void SeatState::clear_optional_kick_reason() {
// @@protoc_insertion_point(one_of_clear_start:SeatState)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (optional_kick_reason_case()) {
    case kKickReason: {
      // No need to clear
      break;
    }
    case OPTIONAL_KICK_REASON_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[2] = OPTIONAL_KICK_REASON_NOT_SET;
}


const ::google::protobuf::MessageLite::ClassData*
SeatState::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(SeatState, _impl_._cached_size_),
              false,
          },
          &SeatState::MergeImpl,
          &SeatState::kDescriptorMethods,
          &descriptor_table_TableState_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 18, 2, 80, 2> SeatState::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SeatState, _impl_._has_bits_),
    0, // no _extensions_
    18, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294705152,  // skipmap
    offsetof(decltype(_table_), field_entries),
    18,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SeatState_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::SeatState>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .PreActionOptionsState pre_action_options = 16;
    {::_pbi::TcParser::FastMtS2,
     {386, 1, 1, PROTOBUF_FIELD_OFFSET(SeatState, _impl_.pre_action_options_)}},
    // int32 seat_idx = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SeatState, _impl_.seat_idx_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(SeatState, _impl_.seat_idx_)}},
    // bool is_folded = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(SeatState, _impl_.is_folded_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(SeatState, _impl_.is_folded_)}},
    // int64 stake = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(SeatState, _impl_.stake_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(SeatState, _impl_.stake_)}},
    // string name = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(SeatState, _impl_.name_)}},
    // string user_avatar = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(SeatState, _impl_.user_avatar_)}},
    // int64 bet = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(SeatState, _impl_.bet_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(SeatState, _impl_.bet_)}},
    // bool is_actions_available = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(SeatState, _impl_.is_actions_available_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(SeatState, _impl_.is_actions_available_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // repeated string cards = 9;
    {::_pbi::TcParser::FastUR1,
     {74, 63, 0, PROTOBUF_FIELD_OFFSET(SeatState, _impl_.cards_)}},
    // .ActionOptionsState action_options = 10;
    {::_pbi::TcParser::FastMtS1,
     {82, 0, 0, PROTOBUF_FIELD_OFFSET(SeatState, _impl_.action_options_)}},
    // bool can_muck = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(SeatState, _impl_.can_muck_), 63>(),
     {88, 63, 0, PROTOBUF_FIELD_OFFSET(SeatState, _impl_.can_muck_)}},
    // bool is_playing = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(SeatState, _impl_.is_playing_), 63>(),
     {96, 63, 0, PROTOBUF_FIELD_OFFSET(SeatState, _impl_.is_playing_)}},
    // bool is_disconnected = 13;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(SeatState, _impl_.is_disconnected_), 63>(),
     {104, 63, 0, PROTOBUF_FIELD_OFFSET(SeatState, _impl_.is_disconnected_)}},
    // bool in_sitout = 14;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(SeatState, _impl_.in_sitout_), 63>(),
     {112, 63, 0, PROTOBUF_FIELD_OFFSET(SeatState, _impl_.in_sitout_)}},
    // bool can_rebuy = 15;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(SeatState, _impl_.can_rebuy_), 63>(),
     {120, 63, 0, PROTOBUF_FIELD_OFFSET(SeatState, _impl_.can_rebuy_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 seat_idx = 1;
    {PROTOBUF_FIELD_OFFSET(SeatState, _impl_.seat_idx_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool is_folded = 2;
    {PROTOBUF_FIELD_OFFSET(SeatState, _impl_.is_folded_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int64 stake = 3;
    {PROTOBUF_FIELD_OFFSET(SeatState, _impl_.stake_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // string name = 4;
    {PROTOBUF_FIELD_OFFSET(SeatState, _impl_.name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string user_avatar = 5;
    {PROTOBUF_FIELD_OFFSET(SeatState, _impl_.user_avatar_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int64 bet = 6;
    {PROTOBUF_FIELD_OFFSET(SeatState, _impl_.bet_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // bool is_actions_available = 7;
    {PROTOBUF_FIELD_OFFSET(SeatState, _impl_.is_actions_available_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string last_action = 8;
    {PROTOBUF_FIELD_OFFSET(SeatState, _impl_.optional_last_action_.last_action_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated string cards = 9;
    {PROTOBUF_FIELD_OFFSET(SeatState, _impl_.cards_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // .ActionOptionsState action_options = 10;
    {PROTOBUF_FIELD_OFFSET(SeatState, _impl_.action_options_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool can_muck = 11;
    {PROTOBUF_FIELD_OFFSET(SeatState, _impl_.can_muck_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool is_playing = 12;
    {PROTOBUF_FIELD_OFFSET(SeatState, _impl_.is_playing_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool is_disconnected = 13;
    {PROTOBUF_FIELD_OFFSET(SeatState, _impl_.is_disconnected_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool in_sitout = 14;
    {PROTOBUF_FIELD_OFFSET(SeatState, _impl_.in_sitout_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool can_rebuy = 15;
    {PROTOBUF_FIELD_OFFSET(SeatState, _impl_.can_rebuy_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .PreActionOptionsState pre_action_options = 16;
    {PROTOBUF_FIELD_OFFSET(SeatState, _impl_.pre_action_options_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string last_pre_action = 17;
    {PROTOBUF_FIELD_OFFSET(SeatState, _impl_.optional_last_pre_action_.last_pre_action_), _Internal::kOneofCaseOffset + 4, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .KickReason kick_reason = 18;
    {PROTOBUF_FIELD_OFFSET(SeatState, _impl_.optional_kick_reason_.kick_reason_), _Internal::kOneofCaseOffset + 8, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kOpenEnum)},
  }}, {{
    {::_pbi::TcParser::GetTable<::ActionOptionsState>()},
    {::_pbi::TcParser::GetTable<::PreActionOptionsState>()},
  }}, {{
    "\11\0\0\0\4\13\0\0\13\5\0\0\0\0\0\0\0\17\0\0\0\0\0\0"
    "SeatState"
    "name"
    "user_avatar"
    "last_action"
    "cards"
    "last_pre_action"
  }},
};

PROTOBUF_NOINLINE void SeatState::Clear() {
// @@protoc_insertion_point(message_clear_start:SeatState)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cards_.Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.user_avatar_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.action_options_ != nullptr);
      _impl_.action_options_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.pre_action_options_ != nullptr);
      _impl_.pre_action_options_->Clear();
    }
  }
  ::memset(&_impl_.stake_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.can_rebuy_) -
      reinterpret_cast<char*>(&_impl_.stake_)) + sizeof(_impl_.can_rebuy_));
  clear_optional_last_action();
  clear_optional_last_pre_action();
  clear_optional_kick_reason();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* SeatState::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SeatState)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 seat_idx = 1;
  if (this->_internal_seat_idx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_seat_idx(), target);
  }

  // bool is_folded = 2;
  if (this->_internal_is_folded() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_is_folded(), target);
  }

  // int64 stake = 3;
  if (this->_internal_stake() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<3>(
            stream, this->_internal_stake(), target);
  }

  // string name = 4;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "SeatState.name");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string user_avatar = 5;
  if (!this->_internal_user_avatar().empty()) {
    const std::string& _s = this->_internal_user_avatar();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "SeatState.user_avatar");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // int64 bet = 6;
  if (this->_internal_bet() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<6>(
            stream, this->_internal_bet(), target);
  }

  // bool is_actions_available = 7;
  if (this->_internal_is_actions_available() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        7, this->_internal_is_actions_available(), target);
  }

  // string last_action = 8;
  if (optional_last_action_case() == kLastAction) {
    const std::string& _s = this->_internal_last_action();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "SeatState.last_action");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  // repeated string cards = 9;
  for (int i = 0, n = this->_internal_cards_size(); i < n; ++i) {
    const auto& s = this->_internal_cards().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "SeatState.cards");
    target = stream->WriteString(9, s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .ActionOptionsState action_options = 10;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        10, *_impl_.action_options_, _impl_.action_options_->GetCachedSize(), target, stream);
  }

  // bool can_muck = 11;
  if (this->_internal_can_muck() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        11, this->_internal_can_muck(), target);
  }

  // bool is_playing = 12;
  if (this->_internal_is_playing() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        12, this->_internal_is_playing(), target);
  }

  // bool is_disconnected = 13;
  if (this->_internal_is_disconnected() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        13, this->_internal_is_disconnected(), target);
  }

  // bool in_sitout = 14;
  if (this->_internal_in_sitout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        14, this->_internal_in_sitout(), target);
  }

  // bool can_rebuy = 15;
  if (this->_internal_can_rebuy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        15, this->_internal_can_rebuy(), target);
  }

  // .PreActionOptionsState pre_action_options = 16;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        16, *_impl_.pre_action_options_, _impl_.pre_action_options_->GetCachedSize(), target, stream);
  }

  // string last_pre_action = 17;
  if (optional_last_pre_action_case() == kLastPreAction) {
    const std::string& _s = this->_internal_last_pre_action();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "SeatState.last_pre_action");
    target = stream->WriteStringMaybeAliased(17, _s, target);
  }

  // .KickReason kick_reason = 18;
  if (optional_kick_reason_case() == kKickReason) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        18, this->_internal_kick_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SeatState)
  return target;
}

::size_t SeatState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SeatState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // repeated string cards = 9;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_cards().size());
  for (int i = 0, n = _internal_cards().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_cards().Get(i));
  }
  // string name = 4;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // string user_avatar = 5;
  if (!this->_internal_user_avatar().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_user_avatar());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .ActionOptionsState action_options = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.action_options_);
    }

    // .PreActionOptionsState pre_action_options = 16;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.pre_action_options_);
    }

  }
  // int64 stake = 3;
  if (this->_internal_stake() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_stake());
  }

  // int64 bet = 6;
  if (this->_internal_bet() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_bet());
  }

  // int32 seat_idx = 1;
  if (this->_internal_seat_idx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_seat_idx());
  }

  // bool is_folded = 2;
  if (this->_internal_is_folded() != 0) {
    total_size += 2;
  }

  // bool is_actions_available = 7;
  if (this->_internal_is_actions_available() != 0) {
    total_size += 2;
  }

  // bool can_muck = 11;
  if (this->_internal_can_muck() != 0) {
    total_size += 2;
  }

  // bool is_playing = 12;
  if (this->_internal_is_playing() != 0) {
    total_size += 2;
  }

  // bool is_disconnected = 13;
  if (this->_internal_is_disconnected() != 0) {
    total_size += 2;
  }

  // bool in_sitout = 14;
  if (this->_internal_in_sitout() != 0) {
    total_size += 2;
  }

  // bool can_rebuy = 15;
  if (this->_internal_can_rebuy() != 0) {
    total_size += 2;
  }

  switch (optional_last_action_case()) {
    // string last_action = 8;
    case kLastAction: {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_last_action());
      break;
    }
    case OPTIONAL_LAST_ACTION_NOT_SET: {
      break;
    }
  }
  switch (optional_last_pre_action_case()) {
    // string last_pre_action = 17;
    case kLastPreAction: {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_last_pre_action());
      break;
    }
    case OPTIONAL_LAST_PRE_ACTION_NOT_SET: {
      break;
    }
  }
  switch (optional_kick_reason_case()) {
    // .KickReason kick_reason = 18;
    case kKickReason: {
      total_size += 2 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_kick_reason());
      break;
    }
    case OPTIONAL_KICK_REASON_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void SeatState::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SeatState*>(&to_msg);
  auto& from = static_cast<const SeatState&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:SeatState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_cards()->MergeFrom(from._internal_cards());
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_user_avatar().empty()) {
    _this->_internal_set_user_avatar(from._internal_user_avatar());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.action_options_ != nullptr);
      if (_this->_impl_.action_options_ == nullptr) {
        _this->_impl_.action_options_ =
            ::google::protobuf::Message::CopyConstruct<::ActionOptionsState>(arena, *from._impl_.action_options_);
      } else {
        _this->_impl_.action_options_->MergeFrom(*from._impl_.action_options_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.pre_action_options_ != nullptr);
      if (_this->_impl_.pre_action_options_ == nullptr) {
        _this->_impl_.pre_action_options_ =
            ::google::protobuf::Message::CopyConstruct<::PreActionOptionsState>(arena, *from._impl_.pre_action_options_);
      } else {
        _this->_impl_.pre_action_options_->MergeFrom(*from._impl_.pre_action_options_);
      }
    }
  }
  if (from._internal_stake() != 0) {
    _this->_impl_.stake_ = from._impl_.stake_;
  }
  if (from._internal_bet() != 0) {
    _this->_impl_.bet_ = from._impl_.bet_;
  }
  if (from._internal_seat_idx() != 0) {
    _this->_impl_.seat_idx_ = from._impl_.seat_idx_;
  }
  if (from._internal_is_folded() != 0) {
    _this->_impl_.is_folded_ = from._impl_.is_folded_;
  }
  if (from._internal_is_actions_available() != 0) {
    _this->_impl_.is_actions_available_ = from._impl_.is_actions_available_;
  }
  if (from._internal_can_muck() != 0) {
    _this->_impl_.can_muck_ = from._impl_.can_muck_;
  }
  if (from._internal_is_playing() != 0) {
    _this->_impl_.is_playing_ = from._impl_.is_playing_;
  }
  if (from._internal_is_disconnected() != 0) {
    _this->_impl_.is_disconnected_ = from._impl_.is_disconnected_;
  }
  if (from._internal_in_sitout() != 0) {
    _this->_impl_.in_sitout_ = from._impl_.in_sitout_;
  }
  if (from._internal_can_rebuy() != 0) {
    _this->_impl_.can_rebuy_ = from._impl_.can_rebuy_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_optional_last_action();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kLastAction: {
        if (oneof_needs_init) {
          _this->_impl_.optional_last_action_.last_action_.InitDefault();
        }
        _this->_impl_.optional_last_action_.last_action_.Set(from._internal_last_action(), arena);
        break;
      }
      case OPTIONAL_LAST_ACTION_NOT_SET:
        break;
    }
  }
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[1]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[1];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_optional_last_pre_action();
      }
      _this->_impl_._oneof_case_[1] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kLastPreAction: {
        if (oneof_needs_init) {
          _this->_impl_.optional_last_pre_action_.last_pre_action_.InitDefault();
        }
        _this->_impl_.optional_last_pre_action_.last_pre_action_.Set(from._internal_last_pre_action(), arena);
        break;
      }
      case OPTIONAL_LAST_PRE_ACTION_NOT_SET:
        break;
    }
  }
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[2]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[2];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_optional_kick_reason();
      }
      _this->_impl_._oneof_case_[2] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kKickReason: {
        _this->_impl_.optional_kick_reason_.kick_reason_ = from._impl_.optional_kick_reason_.kick_reason_;
        break;
      }
      case OPTIONAL_KICK_REASON_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SeatState::CopyFrom(const SeatState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SeatState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SeatState::InternalSwap(SeatState* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.cards_.InternalSwap(&other->_impl_.cards_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.user_avatar_, &other->_impl_.user_avatar_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SeatState, _impl_.can_rebuy_)
      + sizeof(SeatState::_impl_.can_rebuy_)
      - PROTOBUF_FIELD_OFFSET(SeatState, _impl_.action_options_)>(
          reinterpret_cast<char*>(&_impl_.action_options_),
          reinterpret_cast<char*>(&other->_impl_.action_options_));
  swap(_impl_.optional_last_action_, other->_impl_.optional_last_action_);
  swap(_impl_.optional_last_pre_action_, other->_impl_.optional_last_pre_action_);
  swap(_impl_.optional_kick_reason_, other->_impl_.optional_kick_reason_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
  swap(_impl_._oneof_case_[1], other->_impl_._oneof_case_[1]);
  swap(_impl_._oneof_case_[2], other->_impl_._oneof_case_[2]);
}

::google::protobuf::Metadata SeatState::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TableState::_Internal {
 public:
  using HasBits =
      decltype(std::declval<TableState>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(TableState, _impl_._has_bits_);
};

TableState::TableState(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:TableState)
}
inline PROTOBUF_NDEBUG_INLINE TableState::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::TableState& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        seats_{visibility, arena, from.seats_},
        community_cards_{visibility, arena, from.community_cards_},
        showdown_state_{visibility, arena, from.showdown_state_},
        cards_show_state_{visibility, arena, from.cards_show_state_},
        spin_multipliers_{visibility, arena, from.spin_multipliers_},
        _spin_multipliers_cached_byte_size_{0},
        table_name_(arena, from.table_name_) {}

TableState::TableState(
    ::google::protobuf::Arena* arena,
    const TableState& from)
    : ::google::protobuf::Message(arena) {
  TableState* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.pot_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::PotInfo>(
                              arena, *from._impl_.pot_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, table_id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, table_id_),
           offsetof(Impl_, my_seat_idx_) -
               offsetof(Impl_, table_id_) +
               sizeof(Impl_::my_seat_idx_));

  // @@protoc_insertion_point(copy_constructor:TableState)
}
inline PROTOBUF_NDEBUG_INLINE TableState::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        seats_{visibility, arena},
        community_cards_{visibility, arena},
        showdown_state_{visibility, arena},
        cards_show_state_{visibility, arena},
        spin_multipliers_{visibility, arena},
        _spin_multipliers_cached_byte_size_{0},
        table_name_(arena) {}

inline void TableState::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, pot_),
           0,
           offsetof(Impl_, my_seat_idx_) -
               offsetof(Impl_, pot_) +
               sizeof(Impl_::my_seat_idx_));
}
TableState::~TableState() {
  // @@protoc_insertion_point(destructor:TableState)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TableState::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.table_name_.Destroy();
  delete _impl_.pot_;
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
TableState::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(TableState, _impl_._cached_size_),
              false,
          },
          &TableState::MergeImpl,
          &TableState::kDescriptorMethods,
          &descriptor_table_TableState_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 19, 4, 60, 2> TableState::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TableState, _impl_._has_bits_),
    0, // no _extensions_
    19, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294443008,  // skipmap
    offsetof(decltype(_table_), field_entries),
    19,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TableState_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::TableState>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 nt_type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TableState, _impl_.nt_type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TableState, _impl_.nt_type_)}},
    // int64 table_id = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(TableState, _impl_.table_id_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(TableState, _impl_.table_id_)}},
    // int32 seat_idx_bb = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TableState, _impl_.seat_idx_bb_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(TableState, _impl_.seat_idx_bb_)}},
    // int32 seat_idx_sb = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TableState, _impl_.seat_idx_sb_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(TableState, _impl_.seat_idx_sb_)}},
    // int32 seat_idx_btn = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TableState, _impl_.seat_idx_btn_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(TableState, _impl_.seat_idx_btn_)}},
    // .PotInfo pot = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 0, 0, PROTOBUF_FIELD_OFFSET(TableState, _impl_.pot_)}},
    // int32 bb_amount = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TableState, _impl_.bb_amount_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(TableState, _impl_.bb_amount_)}},
    // int32 sb_amount = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TableState, _impl_.sb_amount_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(TableState, _impl_.sb_amount_)}},
    // int64 action_time_limit = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(TableState, _impl_.action_time_limit_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(TableState, _impl_.action_time_limit_)}},
    // bool timebank_activated = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(TableState, _impl_.timebank_activated_), 63>(),
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(TableState, _impl_.timebank_activated_)}},
    // .GameState game_state = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TableState, _impl_.game_state_), 63>(),
     {88, 63, 0, PROTOBUF_FIELD_OFFSET(TableState, _impl_.game_state_)}},
    // repeated .SeatState seats = 12;
    {::_pbi::TcParser::FastMtR1,
     {98, 63, 1, PROTOBUF_FIELD_OFFSET(TableState, _impl_.seats_)}},
    // repeated string community_cards = 13;
    {::_pbi::TcParser::FastUR1,
     {106, 63, 0, PROTOBUF_FIELD_OFFSET(TableState, _impl_.community_cards_)}},
    // repeated .ShowdownState showdown_state = 14;
    {::_pbi::TcParser::FastMtR1,
     {114, 63, 2, PROTOBUF_FIELD_OFFSET(TableState, _impl_.showdown_state_)}},
    // int32 my_seat_idx = 15;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TableState, _impl_.my_seat_idx_), 63>(),
     {120, 63, 0, PROTOBUF_FIELD_OFFSET(TableState, _impl_.my_seat_idx_)}},
    // repeated .CardsShowState cards_show_state = 16;
    {::_pbi::TcParser::FastMtR2,
     {386, 63, 3, PROTOBUF_FIELD_OFFSET(TableState, _impl_.cards_show_state_)}},
    // string table_name = 17;
    {::_pbi::TcParser::FastUS2,
     {394, 63, 0, PROTOBUF_FIELD_OFFSET(TableState, _impl_.table_name_)}},
    // repeated uint64 spin_multipliers = 18;
    {::_pbi::TcParser::FastV64P2,
     {402, 63, 0, PROTOBUF_FIELD_OFFSET(TableState, _impl_.spin_multipliers_)}},
    // uint64 active_spins_multiplier = 19;
    {::_pbi::TcParser::FastV64S2,
     {408, 63, 0, PROTOBUF_FIELD_OFFSET(TableState, _impl_.active_spins_multiplier_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 nt_type = 1;
    {PROTOBUF_FIELD_OFFSET(TableState, _impl_.nt_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int64 table_id = 2;
    {PROTOBUF_FIELD_OFFSET(TableState, _impl_.table_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int32 seat_idx_bb = 3;
    {PROTOBUF_FIELD_OFFSET(TableState, _impl_.seat_idx_bb_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 seat_idx_sb = 4;
    {PROTOBUF_FIELD_OFFSET(TableState, _impl_.seat_idx_sb_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 seat_idx_btn = 5;
    {PROTOBUF_FIELD_OFFSET(TableState, _impl_.seat_idx_btn_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .PotInfo pot = 6;
    {PROTOBUF_FIELD_OFFSET(TableState, _impl_.pot_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 bb_amount = 7;
    {PROTOBUF_FIELD_OFFSET(TableState, _impl_.bb_amount_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 sb_amount = 8;
    {PROTOBUF_FIELD_OFFSET(TableState, _impl_.sb_amount_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int64 action_time_limit = 9;
    {PROTOBUF_FIELD_OFFSET(TableState, _impl_.action_time_limit_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // bool timebank_activated = 10;
    {PROTOBUF_FIELD_OFFSET(TableState, _impl_.timebank_activated_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .GameState game_state = 11;
    {PROTOBUF_FIELD_OFFSET(TableState, _impl_.game_state_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // repeated .SeatState seats = 12;
    {PROTOBUF_FIELD_OFFSET(TableState, _impl_.seats_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated string community_cards = 13;
    {PROTOBUF_FIELD_OFFSET(TableState, _impl_.community_cards_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // repeated .ShowdownState showdown_state = 14;
    {PROTOBUF_FIELD_OFFSET(TableState, _impl_.showdown_state_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 my_seat_idx = 15;
    {PROTOBUF_FIELD_OFFSET(TableState, _impl_.my_seat_idx_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // repeated .CardsShowState cards_show_state = 16;
    {PROTOBUF_FIELD_OFFSET(TableState, _impl_.cards_show_state_), -1, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // string table_name = 17;
    {PROTOBUF_FIELD_OFFSET(TableState, _impl_.table_name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated uint64 spin_multipliers = 18;
    {PROTOBUF_FIELD_OFFSET(TableState, _impl_.spin_multipliers_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedUInt64)},
    // uint64 active_spins_multiplier = 19;
    {PROTOBUF_FIELD_OFFSET(TableState, _impl_.active_spins_multiplier_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
  }}, {{
    {::_pbi::TcParser::GetTable<::PotInfo>()},
    {::_pbi::TcParser::GetTable<::SeatState>()},
    {::_pbi::TcParser::GetTable<::ShowdownState>()},
    {::_pbi::TcParser::GetTable<::CardsShowState>()},
  }}, {{
    "\12\0\0\0\0\0\0\0\0\0\0\0\0\17\0\0\0\12\0\0\0\0\0\0"
    "TableState"
    "community_cards"
    "table_name"
  }},
};

PROTOBUF_NOINLINE void TableState::Clear() {
// @@protoc_insertion_point(message_clear_start:TableState)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.seats_.Clear();
  _impl_.community_cards_.Clear();
  _impl_.showdown_state_.Clear();
  _impl_.cards_show_state_.Clear();
  _impl_.spin_multipliers_.Clear();
  _impl_.table_name_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pot_ != nullptr);
    _impl_.pot_->Clear();
  }
  ::memset(&_impl_.table_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.my_seat_idx_) -
      reinterpret_cast<char*>(&_impl_.table_id_)) + sizeof(_impl_.my_seat_idx_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* TableState::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TableState)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 nt_type = 1;
  if (this->_internal_nt_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_nt_type(), target);
  }

  // int64 table_id = 2;
  if (this->_internal_table_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<2>(
            stream, this->_internal_table_id(), target);
  }

  // int32 seat_idx_bb = 3;
  if (this->_internal_seat_idx_bb() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_seat_idx_bb(), target);
  }

  // int32 seat_idx_sb = 4;
  if (this->_internal_seat_idx_sb() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_seat_idx_sb(), target);
  }

  // int32 seat_idx_btn = 5;
  if (this->_internal_seat_idx_btn() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<5>(
            stream, this->_internal_seat_idx_btn(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .PotInfo pot = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        6, *_impl_.pot_, _impl_.pot_->GetCachedSize(), target, stream);
  }

  // int32 bb_amount = 7;
  if (this->_internal_bb_amount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<7>(
            stream, this->_internal_bb_amount(), target);
  }

  // int32 sb_amount = 8;
  if (this->_internal_sb_amount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<8>(
            stream, this->_internal_sb_amount(), target);
  }

  // int64 action_time_limit = 9;
  if (this->_internal_action_time_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<9>(
            stream, this->_internal_action_time_limit(), target);
  }

  // bool timebank_activated = 10;
  if (this->_internal_timebank_activated() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        10, this->_internal_timebank_activated(), target);
  }

  // .GameState game_state = 11;
  if (this->_internal_game_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        11, this->_internal_game_state(), target);
  }

  // repeated .SeatState seats = 12;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_seats_size());
       i < n; i++) {
    const auto& repfield = this->_internal_seats().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            12, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // repeated string community_cards = 13;
  for (int i = 0, n = this->_internal_community_cards_size(); i < n; ++i) {
    const auto& s = this->_internal_community_cards().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "TableState.community_cards");
    target = stream->WriteString(13, s, target);
  }

  // repeated .ShowdownState showdown_state = 14;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_showdown_state_size());
       i < n; i++) {
    const auto& repfield = this->_internal_showdown_state().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            14, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // int32 my_seat_idx = 15;
  if (this->_internal_my_seat_idx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<15>(
            stream, this->_internal_my_seat_idx(), target);
  }

  // repeated .CardsShowState cards_show_state = 16;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_cards_show_state_size());
       i < n; i++) {
    const auto& repfield = this->_internal_cards_show_state().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            16, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // string table_name = 17;
  if (!this->_internal_table_name().empty()) {
    const std::string& _s = this->_internal_table_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "TableState.table_name");
    target = stream->WriteStringMaybeAliased(17, _s, target);
  }

  // repeated uint64 spin_multipliers = 18;
  {
    int byte_size = _impl_._spin_multipliers_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          18, _internal_spin_multipliers(), byte_size, target);
    }
  }

  // uint64 active_spins_multiplier = 19;
  if (this->_internal_active_spins_multiplier() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        19, this->_internal_active_spins_multiplier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TableState)
  return target;
}

::size_t TableState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TableState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // repeated .SeatState seats = 12;
  total_size += 1UL * this->_internal_seats_size();
  for (const auto& msg : this->_internal_seats()) {
    total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated string community_cards = 13;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_community_cards().size());
  for (int i = 0, n = _internal_community_cards().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_community_cards().Get(i));
  }
  // repeated .ShowdownState showdown_state = 14;
  total_size += 1UL * this->_internal_showdown_state_size();
  for (const auto& msg : this->_internal_showdown_state()) {
    total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .CardsShowState cards_show_state = 16;
  total_size += 2UL * this->_internal_cards_show_state_size();
  for (const auto& msg : this->_internal_cards_show_state()) {
    total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated uint64 spin_multipliers = 18;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_spin_multipliers())
    ;
    _impl_._spin_multipliers_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 2 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // string table_name = 17;
  if (!this->_internal_table_name().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_table_name());
  }

  // .PotInfo pot = 6;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.pot_);
  }

  // int64 table_id = 2;
  if (this->_internal_table_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_table_id());
  }

  // int32 nt_type = 1;
  if (this->_internal_nt_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_nt_type());
  }

  // int32 seat_idx_bb = 3;
  if (this->_internal_seat_idx_bb() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_seat_idx_bb());
  }

  // int32 seat_idx_sb = 4;
  if (this->_internal_seat_idx_sb() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_seat_idx_sb());
  }

  // int32 seat_idx_btn = 5;
  if (this->_internal_seat_idx_btn() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_seat_idx_btn());
  }

  // int32 bb_amount = 7;
  if (this->_internal_bb_amount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_bb_amount());
  }

  // int32 sb_amount = 8;
  if (this->_internal_sb_amount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_sb_amount());
  }

  // int64 action_time_limit = 9;
  if (this->_internal_action_time_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_action_time_limit());
  }

  // bool timebank_activated = 10;
  if (this->_internal_timebank_activated() != 0) {
    total_size += 2;
  }

  // .GameState game_state = 11;
  if (this->_internal_game_state() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_game_state());
  }

  // uint64 active_spins_multiplier = 19;
  if (this->_internal_active_spins_multiplier() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::UInt64Size(
                                    this->_internal_active_spins_multiplier());
  }

  // int32 my_seat_idx = 15;
  if (this->_internal_my_seat_idx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_my_seat_idx());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void TableState::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TableState*>(&to_msg);
  auto& from = static_cast<const TableState&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:TableState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_seats()->MergeFrom(
      from._internal_seats());
  _this->_internal_mutable_community_cards()->MergeFrom(from._internal_community_cards());
  _this->_internal_mutable_showdown_state()->MergeFrom(
      from._internal_showdown_state());
  _this->_internal_mutable_cards_show_state()->MergeFrom(
      from._internal_cards_show_state());
  _this->_internal_mutable_spin_multipliers()->MergeFrom(from._internal_spin_multipliers());
  if (!from._internal_table_name().empty()) {
    _this->_internal_set_table_name(from._internal_table_name());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.pot_ != nullptr);
    if (_this->_impl_.pot_ == nullptr) {
      _this->_impl_.pot_ =
          ::google::protobuf::Message::CopyConstruct<::PotInfo>(arena, *from._impl_.pot_);
    } else {
      _this->_impl_.pot_->MergeFrom(*from._impl_.pot_);
    }
  }
  if (from._internal_table_id() != 0) {
    _this->_impl_.table_id_ = from._impl_.table_id_;
  }
  if (from._internal_nt_type() != 0) {
    _this->_impl_.nt_type_ = from._impl_.nt_type_;
  }
  if (from._internal_seat_idx_bb() != 0) {
    _this->_impl_.seat_idx_bb_ = from._impl_.seat_idx_bb_;
  }
  if (from._internal_seat_idx_sb() != 0) {
    _this->_impl_.seat_idx_sb_ = from._impl_.seat_idx_sb_;
  }
  if (from._internal_seat_idx_btn() != 0) {
    _this->_impl_.seat_idx_btn_ = from._impl_.seat_idx_btn_;
  }
  if (from._internal_bb_amount() != 0) {
    _this->_impl_.bb_amount_ = from._impl_.bb_amount_;
  }
  if (from._internal_sb_amount() != 0) {
    _this->_impl_.sb_amount_ = from._impl_.sb_amount_;
  }
  if (from._internal_action_time_limit() != 0) {
    _this->_impl_.action_time_limit_ = from._impl_.action_time_limit_;
  }
  if (from._internal_timebank_activated() != 0) {
    _this->_impl_.timebank_activated_ = from._impl_.timebank_activated_;
  }
  if (from._internal_game_state() != 0) {
    _this->_impl_.game_state_ = from._impl_.game_state_;
  }
  if (from._internal_active_spins_multiplier() != 0) {
    _this->_impl_.active_spins_multiplier_ = from._impl_.active_spins_multiplier_;
  }
  if (from._internal_my_seat_idx() != 0) {
    _this->_impl_.my_seat_idx_ = from._impl_.my_seat_idx_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TableState::CopyFrom(const TableState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TableState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TableState::InternalSwap(TableState* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.seats_.InternalSwap(&other->_impl_.seats_);
  _impl_.community_cards_.InternalSwap(&other->_impl_.community_cards_);
  _impl_.showdown_state_.InternalSwap(&other->_impl_.showdown_state_);
  _impl_.cards_show_state_.InternalSwap(&other->_impl_.cards_show_state_);
  _impl_.spin_multipliers_.InternalSwap(&other->_impl_.spin_multipliers_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.table_name_, &other->_impl_.table_name_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TableState, _impl_.my_seat_idx_)
      + sizeof(TableState::_impl_.my_seat_idx_)
      - PROTOBUF_FIELD_OFFSET(TableState, _impl_.pot_)>(
          reinterpret_cast<char*>(&_impl_.pot_),
          reinterpret_cast<char*>(&other->_impl_.pot_));
}

::google::protobuf::Metadata TableState::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class HandPlayedInfo::_Internal {
 public:
};

HandPlayedInfo::HandPlayedInfo(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:HandPlayedInfo)
}
inline PROTOBUF_NDEBUG_INLINE HandPlayedInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::HandPlayedInfo& from_msg)
      : mongo_hand_id_(arena, from.mongo_hand_id_),
        file_name_(arena, from.file_name_),
        hand_header_(arena, from.hand_header_),
        hand_body_(arena, from.hand_body_),
        _cached_size_{0} {}

HandPlayedInfo::HandPlayedInfo(
    ::google::protobuf::Arena* arena,
    const HandPlayedInfo& from)
    : ::google::protobuf::Message(arena) {
  HandPlayedInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:HandPlayedInfo)
}
inline PROTOBUF_NDEBUG_INLINE HandPlayedInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : mongo_hand_id_(arena),
        file_name_(arena),
        hand_header_(arena),
        hand_body_(arena),
        _cached_size_{0} {}

inline void HandPlayedInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
HandPlayedInfo::~HandPlayedInfo() {
  // @@protoc_insertion_point(destructor:HandPlayedInfo)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void HandPlayedInfo::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.mongo_hand_id_.Destroy();
  _impl_.file_name_.Destroy();
  _impl_.hand_header_.Destroy();
  _impl_.hand_body_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
HandPlayedInfo::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(HandPlayedInfo, _impl_._cached_size_),
              false,
          },
          &HandPlayedInfo::MergeImpl,
          &HandPlayedInfo::kDescriptorMethods,
          &descriptor_table_TableState_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 65, 2> HandPlayedInfo::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_HandPlayedInfo_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::HandPlayedInfo>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string hand_body = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(HandPlayedInfo, _impl_.hand_body_)}},
    // string mongo_hand_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(HandPlayedInfo, _impl_.mongo_hand_id_)}},
    // string file_name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(HandPlayedInfo, _impl_.file_name_)}},
    // string hand_header = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(HandPlayedInfo, _impl_.hand_header_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string mongo_hand_id = 1;
    {PROTOBUF_FIELD_OFFSET(HandPlayedInfo, _impl_.mongo_hand_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string file_name = 2;
    {PROTOBUF_FIELD_OFFSET(HandPlayedInfo, _impl_.file_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string hand_header = 3;
    {PROTOBUF_FIELD_OFFSET(HandPlayedInfo, _impl_.hand_header_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string hand_body = 4;
    {PROTOBUF_FIELD_OFFSET(HandPlayedInfo, _impl_.hand_body_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\16\15\11\13\11\0\0\0"
    "HandPlayedInfo"
    "mongo_hand_id"
    "file_name"
    "hand_header"
    "hand_body"
  }},
};

PROTOBUF_NOINLINE void HandPlayedInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:HandPlayedInfo)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mongo_hand_id_.ClearToEmpty();
  _impl_.file_name_.ClearToEmpty();
  _impl_.hand_header_.ClearToEmpty();
  _impl_.hand_body_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* HandPlayedInfo::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HandPlayedInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string mongo_hand_id = 1;
  if (!this->_internal_mongo_hand_id().empty()) {
    const std::string& _s = this->_internal_mongo_hand_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "HandPlayedInfo.mongo_hand_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string file_name = 2;
  if (!this->_internal_file_name().empty()) {
    const std::string& _s = this->_internal_file_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "HandPlayedInfo.file_name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string hand_header = 3;
  if (!this->_internal_hand_header().empty()) {
    const std::string& _s = this->_internal_hand_header();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "HandPlayedInfo.hand_header");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string hand_body = 4;
  if (!this->_internal_hand_body().empty()) {
    const std::string& _s = this->_internal_hand_body();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "HandPlayedInfo.hand_body");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HandPlayedInfo)
  return target;
}

::size_t HandPlayedInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HandPlayedInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // string mongo_hand_id = 1;
  if (!this->_internal_mongo_hand_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_mongo_hand_id());
  }

  // string file_name = 2;
  if (!this->_internal_file_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_file_name());
  }

  // string hand_header = 3;
  if (!this->_internal_hand_header().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_hand_header());
  }

  // string hand_body = 4;
  if (!this->_internal_hand_body().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_hand_body());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void HandPlayedInfo::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<HandPlayedInfo*>(&to_msg);
  auto& from = static_cast<const HandPlayedInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:HandPlayedInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_mongo_hand_id().empty()) {
    _this->_internal_set_mongo_hand_id(from._internal_mongo_hand_id());
  }
  if (!from._internal_file_name().empty()) {
    _this->_internal_set_file_name(from._internal_file_name());
  }
  if (!from._internal_hand_header().empty()) {
    _this->_internal_set_hand_header(from._internal_hand_header());
  }
  if (!from._internal_hand_body().empty()) {
    _this->_internal_set_hand_body(from._internal_hand_body());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void HandPlayedInfo::CopyFrom(const HandPlayedInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HandPlayedInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void HandPlayedInfo::InternalSwap(HandPlayedInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.mongo_hand_id_, &other->_impl_.mongo_hand_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.file_name_, &other->_impl_.file_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.hand_header_, &other->_impl_.hand_header_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.hand_body_, &other->_impl_.hand_body_, arena);
}

::google::protobuf::Metadata HandPlayedInfo::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_TableState_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
