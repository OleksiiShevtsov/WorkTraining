// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: TableState.proto
// Protobuf C++ Version: 5.27.3

#ifndef GOOGLE_PROTOBUF_INCLUDED_TableState_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_TableState_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_TableState_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_TableState_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_TableState_2eproto;
class ActionOptionsState;
struct ActionOptionsStateDefaultTypeInternal;
extern ActionOptionsStateDefaultTypeInternal _ActionOptionsState_default_instance_;
class CardsShowState;
struct CardsShowStateDefaultTypeInternal;
extern CardsShowStateDefaultTypeInternal _CardsShowState_default_instance_;
class HandPlayedInfo;
struct HandPlayedInfoDefaultTypeInternal;
extern HandPlayedInfoDefaultTypeInternal _HandPlayedInfo_default_instance_;
class PlayerInAllInState;
struct PlayerInAllInStateDefaultTypeInternal;
extern PlayerInAllInStateDefaultTypeInternal _PlayerInAllInState_default_instance_;
class PlayerOnShowdownState;
struct PlayerOnShowdownStateDefaultTypeInternal;
extern PlayerOnShowdownStateDefaultTypeInternal _PlayerOnShowdownState_default_instance_;
class PotInfo;
struct PotInfoDefaultTypeInternal;
extern PotInfoDefaultTypeInternal _PotInfo_default_instance_;
class PreActionOptionsState;
struct PreActionOptionsStateDefaultTypeInternal;
extern PreActionOptionsStateDefaultTypeInternal _PreActionOptionsState_default_instance_;
class SeatState;
struct SeatStateDefaultTypeInternal;
extern SeatStateDefaultTypeInternal _SeatState_default_instance_;
class ShowdownState;
struct ShowdownStateDefaultTypeInternal;
extern ShowdownStateDefaultTypeInternal _ShowdownState_default_instance_;
class SidePotInfo;
struct SidePotInfoDefaultTypeInternal;
extern SidePotInfoDefaultTypeInternal _SidePotInfo_default_instance_;
class SidePotShortStackPerAmountInfo;
struct SidePotShortStackPerAmountInfoDefaultTypeInternal;
extern SidePotShortStackPerAmountInfoDefaultTypeInternal _SidePotShortStackPerAmountInfo_default_instance_;
class TableState;
struct TableStateDefaultTypeInternal;
extern TableStateDefaultTypeInternal _TableState_default_instance_;
class WinnerState;
struct WinnerStateDefaultTypeInternal;
extern WinnerStateDefaultTypeInternal _WinnerState_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

enum GameState : int {
  Waiting = 0,
  PreFlop = 1,
  Flop = 2,
  Turn = 3,
  River = 4,
  Muck = 5,
  Showdown = 6,
  Closed = 7,
  Default = 8,
  PreparingNextHand = 9,
  GameState_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  GameState_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool GameState_IsValid(int value);
extern const uint32_t GameState_internal_data_[];
constexpr GameState GameState_MIN = static_cast<GameState>(0);
constexpr GameState GameState_MAX = static_cast<GameState>(9);
constexpr int GameState_ARRAYSIZE = 9 + 1;
const ::google::protobuf::EnumDescriptor*
GameState_descriptor();
template <typename T>
const std::string& GameState_Name(T value) {
  static_assert(std::is_same<T, GameState>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to GameState_Name().");
  return GameState_Name(static_cast<GameState>(value));
}
template <>
inline const std::string& GameState_Name(GameState value) {
  return ::google::protobuf::internal::NameOfDenseEnum<GameState_descriptor,
                                                 0, 9>(
      static_cast<int>(value));
}
inline bool GameState_Parse(absl::string_view name, GameState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GameState>(
      GameState_descriptor(), name, value);
}
enum SeatActions : int {
  PostSB = 0,
  PostBB = 1,
  Bet = 2,
  Raise = 3,
  AllIn = 4,
  Fold = 5,
  Check = 6,
  Call = 7,
  SeatActions_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  SeatActions_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool SeatActions_IsValid(int value);
extern const uint32_t SeatActions_internal_data_[];
constexpr SeatActions SeatActions_MIN = static_cast<SeatActions>(0);
constexpr SeatActions SeatActions_MAX = static_cast<SeatActions>(7);
constexpr int SeatActions_ARRAYSIZE = 7 + 1;
const ::google::protobuf::EnumDescriptor*
SeatActions_descriptor();
template <typename T>
const std::string& SeatActions_Name(T value) {
  static_assert(std::is_same<T, SeatActions>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to SeatActions_Name().");
  return SeatActions_Name(static_cast<SeatActions>(value));
}
template <>
inline const std::string& SeatActions_Name(SeatActions value) {
  return ::google::protobuf::internal::NameOfDenseEnum<SeatActions_descriptor,
                                                 0, 7>(
      static_cast<int>(value));
}
inline bool SeatActions_Parse(absl::string_view name, SeatActions* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SeatActions>(
      SeatActions_descriptor(), name, value);
}
enum PreActions : int {
  NoPreaction = 0,
  pFoldToAnyBet = 1,
  pCheck = 2,
  pCheckOrFold = 3,
  pCall = 4,
  PreActions_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  PreActions_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool PreActions_IsValid(int value);
extern const uint32_t PreActions_internal_data_[];
constexpr PreActions PreActions_MIN = static_cast<PreActions>(0);
constexpr PreActions PreActions_MAX = static_cast<PreActions>(4);
constexpr int PreActions_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
PreActions_descriptor();
template <typename T>
const std::string& PreActions_Name(T value) {
  static_assert(std::is_same<T, PreActions>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to PreActions_Name().");
  return PreActions_Name(static_cast<PreActions>(value));
}
template <>
inline const std::string& PreActions_Name(PreActions value) {
  return ::google::protobuf::internal::NameOfDenseEnum<PreActions_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool PreActions_Parse(absl::string_view name, PreActions* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PreActions>(
      PreActions_descriptor(), name, value);
}
enum KickReason : int {
  SitoutLimit = 0,
  KickReason_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  KickReason_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool KickReason_IsValid(int value);
extern const uint32_t KickReason_internal_data_[];
constexpr KickReason KickReason_MIN = static_cast<KickReason>(0);
constexpr KickReason KickReason_MAX = static_cast<KickReason>(0);
constexpr int KickReason_ARRAYSIZE = 0 + 1;
const ::google::protobuf::EnumDescriptor*
KickReason_descriptor();
template <typename T>
const std::string& KickReason_Name(T value) {
  static_assert(std::is_same<T, KickReason>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to KickReason_Name().");
  return KickReason_Name(static_cast<KickReason>(value));
}
template <>
inline const std::string& KickReason_Name(KickReason value) {
  return ::google::protobuf::internal::NameOfDenseEnum<KickReason_descriptor,
                                                 0, 0>(
      static_cast<int>(value));
}
inline bool KickReason_Parse(absl::string_view name, KickReason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<KickReason>(
      KickReason_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class SidePotShortStackPerAmountInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:SidePotShortStackPerAmountInfo) */ {
 public:
  inline SidePotShortStackPerAmountInfo() : SidePotShortStackPerAmountInfo(nullptr) {}
  ~SidePotShortStackPerAmountInfo() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SidePotShortStackPerAmountInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline SidePotShortStackPerAmountInfo(const SidePotShortStackPerAmountInfo& from) : SidePotShortStackPerAmountInfo(nullptr, from) {}
  inline SidePotShortStackPerAmountInfo(SidePotShortStackPerAmountInfo&& from) noexcept
      : SidePotShortStackPerAmountInfo(nullptr, std::move(from)) {}
  inline SidePotShortStackPerAmountInfo& operator=(const SidePotShortStackPerAmountInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SidePotShortStackPerAmountInfo& operator=(SidePotShortStackPerAmountInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SidePotShortStackPerAmountInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SidePotShortStackPerAmountInfo* internal_default_instance() {
    return reinterpret_cast<const SidePotShortStackPerAmountInfo*>(
        &_SidePotShortStackPerAmountInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(SidePotShortStackPerAmountInfo& a, SidePotShortStackPerAmountInfo& b) { a.Swap(&b); }
  inline void Swap(SidePotShortStackPerAmountInfo* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SidePotShortStackPerAmountInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SidePotShortStackPerAmountInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<SidePotShortStackPerAmountInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SidePotShortStackPerAmountInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SidePotShortStackPerAmountInfo& from) { SidePotShortStackPerAmountInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SidePotShortStackPerAmountInfo* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "SidePotShortStackPerAmountInfo"; }

 protected:
  explicit SidePotShortStackPerAmountInfo(::google::protobuf::Arena* arena);
  SidePotShortStackPerAmountInfo(::google::protobuf::Arena* arena, const SidePotShortStackPerAmountInfo& from);
  SidePotShortStackPerAmountInfo(::google::protobuf::Arena* arena, SidePotShortStackPerAmountInfo&& from) noexcept
      : SidePotShortStackPerAmountInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kShortStackFieldNumber = 1,
    kAmountFieldNumber = 2,
  };
  // int64 short_stack = 1;
  void clear_short_stack() ;
  ::int64_t short_stack() const;
  void set_short_stack(::int64_t value);

  private:
  ::int64_t _internal_short_stack() const;
  void _internal_set_short_stack(::int64_t value);

  public:
  // int64 amount = 2;
  void clear_amount() ;
  ::int64_t amount() const;
  void set_amount(::int64_t value);

  private:
  ::int64_t _internal_amount() const;
  void _internal_set_amount(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:SidePotShortStackPerAmountInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_SidePotShortStackPerAmountInfo_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SidePotShortStackPerAmountInfo& from_msg);
    ::int64_t short_stack_;
    ::int64_t amount_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TableState_2eproto;
};
// -------------------------------------------------------------------

class SidePotInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:SidePotInfo) */ {
 public:
  inline SidePotInfo() : SidePotInfo(nullptr) {}
  ~SidePotInfo() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SidePotInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline SidePotInfo(const SidePotInfo& from) : SidePotInfo(nullptr, from) {}
  inline SidePotInfo(SidePotInfo&& from) noexcept
      : SidePotInfo(nullptr, std::move(from)) {}
  inline SidePotInfo& operator=(const SidePotInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SidePotInfo& operator=(SidePotInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SidePotInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SidePotInfo* internal_default_instance() {
    return reinterpret_cast<const SidePotInfo*>(
        &_SidePotInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(SidePotInfo& a, SidePotInfo& b) { a.Swap(&b); }
  inline void Swap(SidePotInfo* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SidePotInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SidePotInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<SidePotInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SidePotInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SidePotInfo& from) { SidePotInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SidePotInfo* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "SidePotInfo"; }

 protected:
  explicit SidePotInfo(::google::protobuf::Arena* arena);
  SidePotInfo(::google::protobuf::Arena* arena, const SidePotInfo& from);
  SidePotInfo(::google::protobuf::Arena* arena, SidePotInfo&& from) noexcept
      : SidePotInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kShortStackFieldNumber = 1,
    kAmountFieldNumber = 2,
  };
  // int64 short_stack = 1;
  void clear_short_stack() ;
  ::int64_t short_stack() const;
  void set_short_stack(::int64_t value);

  private:
  ::int64_t _internal_short_stack() const;
  void _internal_set_short_stack(::int64_t value);

  public:
  // int64 amount = 2;
  void clear_amount() ;
  ::int64_t amount() const;
  void set_amount(::int64_t value);

  private:
  ::int64_t _internal_amount() const;
  void _internal_set_amount(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:SidePotInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_SidePotInfo_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SidePotInfo& from_msg);
    ::int64_t short_stack_;
    ::int64_t amount_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TableState_2eproto;
};
// -------------------------------------------------------------------

class PreActionOptionsState final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:PreActionOptionsState) */ {
 public:
  inline PreActionOptionsState() : PreActionOptionsState(nullptr) {}
  ~PreActionOptionsState() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PreActionOptionsState(
      ::google::protobuf::internal::ConstantInitialized);

  inline PreActionOptionsState(const PreActionOptionsState& from) : PreActionOptionsState(nullptr, from) {}
  inline PreActionOptionsState(PreActionOptionsState&& from) noexcept
      : PreActionOptionsState(nullptr, std::move(from)) {}
  inline PreActionOptionsState& operator=(const PreActionOptionsState& from) {
    CopyFrom(from);
    return *this;
  }
  inline PreActionOptionsState& operator=(PreActionOptionsState&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PreActionOptionsState& default_instance() {
    return *internal_default_instance();
  }
  static inline const PreActionOptionsState* internal_default_instance() {
    return reinterpret_cast<const PreActionOptionsState*>(
        &_PreActionOptionsState_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(PreActionOptionsState& a, PreActionOptionsState& b) { a.Swap(&b); }
  inline void Swap(PreActionOptionsState* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PreActionOptionsState* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PreActionOptionsState* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<PreActionOptionsState>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PreActionOptionsState& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PreActionOptionsState& from) { PreActionOptionsState::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PreActionOptionsState* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "PreActionOptionsState"; }

 protected:
  explicit PreActionOptionsState(::google::protobuf::Arena* arena);
  PreActionOptionsState(::google::protobuf::Arena* arena, const PreActionOptionsState& from);
  PreActionOptionsState(::google::protobuf::Arena* arena, PreActionOptionsState&& from) noexcept
      : PreActionOptionsState(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSeatPreActionsFieldNumber = 1,
  };
  // repeated .PreActions seat_pre_actions = 1;
  int seat_pre_actions_size() const;
  private:
  int _internal_seat_pre_actions_size() const;

  public:
  void clear_seat_pre_actions() ;
  public:
  ::PreActions seat_pre_actions(int index) const;
  void set_seat_pre_actions(int index, ::PreActions value);
  void add_seat_pre_actions(::PreActions value);
  const ::google::protobuf::RepeatedField<int>& seat_pre_actions() const;
  ::google::protobuf::RepeatedField<int>* mutable_seat_pre_actions();

  private:
  const ::google::protobuf::RepeatedField<int>& _internal_seat_pre_actions() const;
  ::google::protobuf::RepeatedField<int>* _internal_mutable_seat_pre_actions();

  public:
  // @@protoc_insertion_point(class_scope:PreActionOptionsState)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_PreActionOptionsState_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PreActionOptionsState& from_msg);
    ::google::protobuf::RepeatedField<int> seat_pre_actions_;
    mutable ::google::protobuf::internal::CachedSize _seat_pre_actions_cached_byte_size_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TableState_2eproto;
};
// -------------------------------------------------------------------

class PlayerOnShowdownState final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:PlayerOnShowdownState) */ {
 public:
  inline PlayerOnShowdownState() : PlayerOnShowdownState(nullptr) {}
  ~PlayerOnShowdownState() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PlayerOnShowdownState(
      ::google::protobuf::internal::ConstantInitialized);

  inline PlayerOnShowdownState(const PlayerOnShowdownState& from) : PlayerOnShowdownState(nullptr, from) {}
  inline PlayerOnShowdownState(PlayerOnShowdownState&& from) noexcept
      : PlayerOnShowdownState(nullptr, std::move(from)) {}
  inline PlayerOnShowdownState& operator=(const PlayerOnShowdownState& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerOnShowdownState& operator=(PlayerOnShowdownState&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerOnShowdownState& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerOnShowdownState* internal_default_instance() {
    return reinterpret_cast<const PlayerOnShowdownState*>(
        &_PlayerOnShowdownState_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(PlayerOnShowdownState& a, PlayerOnShowdownState& b) { a.Swap(&b); }
  inline void Swap(PlayerOnShowdownState* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerOnShowdownState* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerOnShowdownState* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<PlayerOnShowdownState>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PlayerOnShowdownState& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PlayerOnShowdownState& from) { PlayerOnShowdownState::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PlayerOnShowdownState* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "PlayerOnShowdownState"; }

 protected:
  explicit PlayerOnShowdownState(::google::protobuf::Arena* arena);
  PlayerOnShowdownState(::google::protobuf::Arena* arena, const PlayerOnShowdownState& from);
  PlayerOnShowdownState(::google::protobuf::Arena* arena, PlayerOnShowdownState&& from) noexcept
      : PlayerOnShowdownState(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCardsFieldNumber = 3,
    kSeatIdxFieldNumber = 1,
    kMuckFieldNumber = 2,
  };
  // repeated string cards = 3;
  int cards_size() const;
  private:
  int _internal_cards_size() const;

  public:
  void clear_cards() ;
  const std::string& cards(int index) const;
  std::string* mutable_cards(int index);
  void set_cards(int index, const std::string& value);
  void set_cards(int index, std::string&& value);
  void set_cards(int index, const char* value);
  void set_cards(int index, const char* value, std::size_t size);
  void set_cards(int index, absl::string_view value);
  std::string* add_cards();
  void add_cards(const std::string& value);
  void add_cards(std::string&& value);
  void add_cards(const char* value);
  void add_cards(const char* value, std::size_t size);
  void add_cards(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& cards() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_cards();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_cards() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_cards();

  public:
  // int32 seat_idx = 1;
  void clear_seat_idx() ;
  ::int32_t seat_idx() const;
  void set_seat_idx(::int32_t value);

  private:
  ::int32_t _internal_seat_idx() const;
  void _internal_set_seat_idx(::int32_t value);

  public:
  // bool muck = 2;
  void clear_muck() ;
  bool muck() const;
  void set_muck(bool value);

  private:
  bool _internal_muck() const;
  void _internal_set_muck(bool value);

  public:
  // @@protoc_insertion_point(class_scope:PlayerOnShowdownState)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      35, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_PlayerOnShowdownState_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PlayerOnShowdownState& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> cards_;
    ::int32_t seat_idx_;
    bool muck_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TableState_2eproto;
};
// -------------------------------------------------------------------

class PlayerInAllInState final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:PlayerInAllInState) */ {
 public:
  inline PlayerInAllInState() : PlayerInAllInState(nullptr) {}
  ~PlayerInAllInState() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PlayerInAllInState(
      ::google::protobuf::internal::ConstantInitialized);

  inline PlayerInAllInState(const PlayerInAllInState& from) : PlayerInAllInState(nullptr, from) {}
  inline PlayerInAllInState(PlayerInAllInState&& from) noexcept
      : PlayerInAllInState(nullptr, std::move(from)) {}
  inline PlayerInAllInState& operator=(const PlayerInAllInState& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerInAllInState& operator=(PlayerInAllInState&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerInAllInState& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerInAllInState* internal_default_instance() {
    return reinterpret_cast<const PlayerInAllInState*>(
        &_PlayerInAllInState_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(PlayerInAllInState& a, PlayerInAllInState& b) { a.Swap(&b); }
  inline void Swap(PlayerInAllInState* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerInAllInState* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerInAllInState* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<PlayerInAllInState>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PlayerInAllInState& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PlayerInAllInState& from) { PlayerInAllInState::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PlayerInAllInState* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "PlayerInAllInState"; }

 protected:
  explicit PlayerInAllInState(::google::protobuf::Arena* arena);
  PlayerInAllInState(::google::protobuf::Arena* arena, const PlayerInAllInState& from);
  PlayerInAllInState(::google::protobuf::Arena* arena, PlayerInAllInState&& from) noexcept
      : PlayerInAllInState(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCardsFieldNumber = 2,
    kWinPercentageFieldNumber = 3,
    kSeatIdxFieldNumber = 1,
  };
  // repeated string cards = 2;
  int cards_size() const;
  private:
  int _internal_cards_size() const;

  public:
  void clear_cards() ;
  const std::string& cards(int index) const;
  std::string* mutable_cards(int index);
  void set_cards(int index, const std::string& value);
  void set_cards(int index, std::string&& value);
  void set_cards(int index, const char* value);
  void set_cards(int index, const char* value, std::size_t size);
  void set_cards(int index, absl::string_view value);
  std::string* add_cards();
  void add_cards(const std::string& value);
  void add_cards(std::string&& value);
  void add_cards(const char* value);
  void add_cards(const char* value, std::size_t size);
  void add_cards(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& cards() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_cards();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_cards() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_cards();

  public:
  // double win_percentage = 3;
  void clear_win_percentage() ;
  double win_percentage() const;
  void set_win_percentage(double value);

  private:
  double _internal_win_percentage() const;
  void _internal_set_win_percentage(double value);

  public:
  // int32 seat_idx = 1;
  void clear_seat_idx() ;
  ::int32_t seat_idx() const;
  void set_seat_idx(::int32_t value);

  private:
  ::int32_t _internal_seat_idx() const;
  void _internal_set_seat_idx(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:PlayerInAllInState)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      32, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_PlayerInAllInState_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PlayerInAllInState& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> cards_;
    double win_percentage_;
    ::int32_t seat_idx_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TableState_2eproto;
};
// -------------------------------------------------------------------

class HandPlayedInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:HandPlayedInfo) */ {
 public:
  inline HandPlayedInfo() : HandPlayedInfo(nullptr) {}
  ~HandPlayedInfo() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR HandPlayedInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline HandPlayedInfo(const HandPlayedInfo& from) : HandPlayedInfo(nullptr, from) {}
  inline HandPlayedInfo(HandPlayedInfo&& from) noexcept
      : HandPlayedInfo(nullptr, std::move(from)) {}
  inline HandPlayedInfo& operator=(const HandPlayedInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline HandPlayedInfo& operator=(HandPlayedInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HandPlayedInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const HandPlayedInfo* internal_default_instance() {
    return reinterpret_cast<const HandPlayedInfo*>(
        &_HandPlayedInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 12;
  friend void swap(HandPlayedInfo& a, HandPlayedInfo& b) { a.Swap(&b); }
  inline void Swap(HandPlayedInfo* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HandPlayedInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HandPlayedInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<HandPlayedInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const HandPlayedInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const HandPlayedInfo& from) { HandPlayedInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(HandPlayedInfo* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "HandPlayedInfo"; }

 protected:
  explicit HandPlayedInfo(::google::protobuf::Arena* arena);
  HandPlayedInfo(::google::protobuf::Arena* arena, const HandPlayedInfo& from);
  HandPlayedInfo(::google::protobuf::Arena* arena, HandPlayedInfo&& from) noexcept
      : HandPlayedInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMongoHandIdFieldNumber = 1,
    kFileNameFieldNumber = 2,
    kHandHeaderFieldNumber = 3,
    kHandBodyFieldNumber = 4,
  };
  // string mongo_hand_id = 1;
  void clear_mongo_hand_id() ;
  const std::string& mongo_hand_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_mongo_hand_id(Arg_&& arg, Args_... args);
  std::string* mutable_mongo_hand_id();
  PROTOBUF_NODISCARD std::string* release_mongo_hand_id();
  void set_allocated_mongo_hand_id(std::string* value);

  private:
  const std::string& _internal_mongo_hand_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mongo_hand_id(
      const std::string& value);
  std::string* _internal_mutable_mongo_hand_id();

  public:
  // string file_name = 2;
  void clear_file_name() ;
  const std::string& file_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_file_name(Arg_&& arg, Args_... args);
  std::string* mutable_file_name();
  PROTOBUF_NODISCARD std::string* release_file_name();
  void set_allocated_file_name(std::string* value);

  private:
  const std::string& _internal_file_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_name(
      const std::string& value);
  std::string* _internal_mutable_file_name();

  public:
  // string hand_header = 3;
  void clear_hand_header() ;
  const std::string& hand_header() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_hand_header(Arg_&& arg, Args_... args);
  std::string* mutable_hand_header();
  PROTOBUF_NODISCARD std::string* release_hand_header();
  void set_allocated_hand_header(std::string* value);

  private:
  const std::string& _internal_hand_header() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hand_header(
      const std::string& value);
  std::string* _internal_mutable_hand_header();

  public:
  // string hand_body = 4;
  void clear_hand_body() ;
  const std::string& hand_body() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_hand_body(Arg_&& arg, Args_... args);
  std::string* mutable_hand_body();
  PROTOBUF_NODISCARD std::string* release_hand_body();
  void set_allocated_hand_body(std::string* value);

  private:
  const std::string& _internal_hand_body() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hand_body(
      const std::string& value);
  std::string* _internal_mutable_hand_body();

  public:
  // @@protoc_insertion_point(class_scope:HandPlayedInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      65, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_HandPlayedInfo_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const HandPlayedInfo& from_msg);
    ::google::protobuf::internal::ArenaStringPtr mongo_hand_id_;
    ::google::protobuf::internal::ArenaStringPtr file_name_;
    ::google::protobuf::internal::ArenaStringPtr hand_header_;
    ::google::protobuf::internal::ArenaStringPtr hand_body_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TableState_2eproto;
};
// -------------------------------------------------------------------

class ActionOptionsState final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ActionOptionsState) */ {
 public:
  inline ActionOptionsState() : ActionOptionsState(nullptr) {}
  ~ActionOptionsState() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ActionOptionsState(
      ::google::protobuf::internal::ConstantInitialized);

  inline ActionOptionsState(const ActionOptionsState& from) : ActionOptionsState(nullptr, from) {}
  inline ActionOptionsState(ActionOptionsState&& from) noexcept
      : ActionOptionsState(nullptr, std::move(from)) {}
  inline ActionOptionsState& operator=(const ActionOptionsState& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActionOptionsState& operator=(ActionOptionsState&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ActionOptionsState& default_instance() {
    return *internal_default_instance();
  }
  static inline const ActionOptionsState* internal_default_instance() {
    return reinterpret_cast<const ActionOptionsState*>(
        &_ActionOptionsState_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(ActionOptionsState& a, ActionOptionsState& b) { a.Swap(&b); }
  inline void Swap(ActionOptionsState* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActionOptionsState* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ActionOptionsState* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<ActionOptionsState>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ActionOptionsState& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ActionOptionsState& from) { ActionOptionsState::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ActionOptionsState* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "ActionOptionsState"; }

 protected:
  explicit ActionOptionsState(::google::protobuf::Arena* arena);
  ActionOptionsState(::google::protobuf::Arena* arena, const ActionOptionsState& from);
  ActionOptionsState(::google::protobuf::Arena* arena, ActionOptionsState&& from) noexcept
      : ActionOptionsState(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSeatActionsFieldNumber = 3,
    kMinBetFieldNumber = 1,
    kMaxBetFieldNumber = 2,
  };
  // repeated .SeatActions seat_actions = 3;
  int seat_actions_size() const;
  private:
  int _internal_seat_actions_size() const;

  public:
  void clear_seat_actions() ;
  public:
  ::SeatActions seat_actions(int index) const;
  void set_seat_actions(int index, ::SeatActions value);
  void add_seat_actions(::SeatActions value);
  const ::google::protobuf::RepeatedField<int>& seat_actions() const;
  ::google::protobuf::RepeatedField<int>* mutable_seat_actions();

  private:
  const ::google::protobuf::RepeatedField<int>& _internal_seat_actions() const;
  ::google::protobuf::RepeatedField<int>* _internal_mutable_seat_actions();

  public:
  // int64 min_bet = 1;
  void clear_min_bet() ;
  ::int64_t min_bet() const;
  void set_min_bet(::int64_t value);

  private:
  ::int64_t _internal_min_bet() const;
  void _internal_set_min_bet(::int64_t value);

  public:
  // int64 max_bet = 2;
  void clear_max_bet() ;
  ::int64_t max_bet() const;
  void set_max_bet(::int64_t value);

  private:
  ::int64_t _internal_max_bet() const;
  void _internal_set_max_bet(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:ActionOptionsState)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_ActionOptionsState_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ActionOptionsState& from_msg);
    ::google::protobuf::RepeatedField<int> seat_actions_;
    mutable ::google::protobuf::internal::CachedSize _seat_actions_cached_byte_size_;
    ::int64_t min_bet_;
    ::int64_t max_bet_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TableState_2eproto;
};
// -------------------------------------------------------------------

class WinnerState final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:WinnerState) */ {
 public:
  inline WinnerState() : WinnerState(nullptr) {}
  ~WinnerState() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR WinnerState(
      ::google::protobuf::internal::ConstantInitialized);

  inline WinnerState(const WinnerState& from) : WinnerState(nullptr, from) {}
  inline WinnerState(WinnerState&& from) noexcept
      : WinnerState(nullptr, std::move(from)) {}
  inline WinnerState& operator=(const WinnerState& from) {
    CopyFrom(from);
    return *this;
  }
  inline WinnerState& operator=(WinnerState&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WinnerState& default_instance() {
    return *internal_default_instance();
  }
  static inline const WinnerState* internal_default_instance() {
    return reinterpret_cast<const WinnerState*>(
        &_WinnerState_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(WinnerState& a, WinnerState& b) { a.Swap(&b); }
  inline void Swap(WinnerState* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WinnerState* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WinnerState* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<WinnerState>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WinnerState& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const WinnerState& from) { WinnerState::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(WinnerState* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "WinnerState"; }

 protected:
  explicit WinnerState(::google::protobuf::Arena* arena);
  WinnerState(::google::protobuf::Arena* arena, const WinnerState& from);
  WinnerState(::google::protobuf::Arena* arena, WinnerState&& from) noexcept
      : WinnerState(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSidePotsShortStacksFieldNumber = 3,
    kMoneyRewardFieldNumber = 2,
    kSeatIdxFieldNumber = 1,
  };
  // repeated .SidePotShortStackPerAmountInfo side_pots_short_stacks = 3;
  int side_pots_short_stacks_size() const;
  private:
  int _internal_side_pots_short_stacks_size() const;

  public:
  void clear_side_pots_short_stacks() ;
  ::SidePotShortStackPerAmountInfo* mutable_side_pots_short_stacks(int index);
  ::google::protobuf::RepeatedPtrField<::SidePotShortStackPerAmountInfo>* mutable_side_pots_short_stacks();

  private:
  const ::google::protobuf::RepeatedPtrField<::SidePotShortStackPerAmountInfo>& _internal_side_pots_short_stacks() const;
  ::google::protobuf::RepeatedPtrField<::SidePotShortStackPerAmountInfo>* _internal_mutable_side_pots_short_stacks();
  public:
  const ::SidePotShortStackPerAmountInfo& side_pots_short_stacks(int index) const;
  ::SidePotShortStackPerAmountInfo* add_side_pots_short_stacks();
  const ::google::protobuf::RepeatedPtrField<::SidePotShortStackPerAmountInfo>& side_pots_short_stacks() const;
  // int64 money_reward = 2;
  void clear_money_reward() ;
  ::int64_t money_reward() const;
  void set_money_reward(::int64_t value);

  private:
  ::int64_t _internal_money_reward() const;
  void _internal_set_money_reward(::int64_t value);

  public:
  // int32 seat_idx = 1;
  void clear_seat_idx() ;
  ::int32_t seat_idx() const;
  void set_seat_idx(::int32_t value);

  private:
  ::int32_t _internal_seat_idx() const;
  void _internal_set_seat_idx(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:WinnerState)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_WinnerState_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const WinnerState& from_msg);
    ::google::protobuf::RepeatedPtrField< ::SidePotShortStackPerAmountInfo > side_pots_short_stacks_;
    ::int64_t money_reward_;
    ::int32_t seat_idx_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TableState_2eproto;
};
// -------------------------------------------------------------------

class SeatState final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:SeatState) */ {
 public:
  inline SeatState() : SeatState(nullptr) {}
  ~SeatState() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SeatState(
      ::google::protobuf::internal::ConstantInitialized);

  inline SeatState(const SeatState& from) : SeatState(nullptr, from) {}
  inline SeatState(SeatState&& from) noexcept
      : SeatState(nullptr, std::move(from)) {}
  inline SeatState& operator=(const SeatState& from) {
    CopyFrom(from);
    return *this;
  }
  inline SeatState& operator=(SeatState&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SeatState& default_instance() {
    return *internal_default_instance();
  }
  enum OptionalLastActionCase {
    kLastAction = 8,
    OPTIONAL_LAST_ACTION_NOT_SET = 0,
  };
  enum OptionalLastPreActionCase {
    kLastPreAction = 17,
    OPTIONAL_LAST_PRE_ACTION_NOT_SET = 0,
  };
  enum OptionalKickReasonCase {
    kKickReason = 18,
    OPTIONAL_KICK_REASON_NOT_SET = 0,
  };
  static inline const SeatState* internal_default_instance() {
    return reinterpret_cast<const SeatState*>(
        &_SeatState_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(SeatState& a, SeatState& b) { a.Swap(&b); }
  inline void Swap(SeatState* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SeatState* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SeatState* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<SeatState>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SeatState& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SeatState& from) { SeatState::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SeatState* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "SeatState"; }

 protected:
  explicit SeatState(::google::protobuf::Arena* arena);
  SeatState(::google::protobuf::Arena* arena, const SeatState& from);
  SeatState(::google::protobuf::Arena* arena, SeatState&& from) noexcept
      : SeatState(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCardsFieldNumber = 9,
    kNameFieldNumber = 4,
    kUserAvatarFieldNumber = 5,
    kActionOptionsFieldNumber = 10,
    kPreActionOptionsFieldNumber = 16,
    kStakeFieldNumber = 3,
    kBetFieldNumber = 6,
    kSeatIdxFieldNumber = 1,
    kIsFoldedFieldNumber = 2,
    kIsActionsAvailableFieldNumber = 7,
    kCanMuckFieldNumber = 11,
    kIsPlayingFieldNumber = 12,
    kIsDisconnectedFieldNumber = 13,
    kInSitoutFieldNumber = 14,
    kCanRebuyFieldNumber = 15,
    kLastActionFieldNumber = 8,
    kLastPreActionFieldNumber = 17,
    kKickReasonFieldNumber = 18,
  };
  // repeated string cards = 9;
  int cards_size() const;
  private:
  int _internal_cards_size() const;

  public:
  void clear_cards() ;
  const std::string& cards(int index) const;
  std::string* mutable_cards(int index);
  void set_cards(int index, const std::string& value);
  void set_cards(int index, std::string&& value);
  void set_cards(int index, const char* value);
  void set_cards(int index, const char* value, std::size_t size);
  void set_cards(int index, absl::string_view value);
  std::string* add_cards();
  void add_cards(const std::string& value);
  void add_cards(std::string&& value);
  void add_cards(const char* value);
  void add_cards(const char* value, std::size_t size);
  void add_cards(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& cards() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_cards();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_cards() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_cards();

  public:
  // string name = 4;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string user_avatar = 5;
  void clear_user_avatar() ;
  const std::string& user_avatar() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_avatar(Arg_&& arg, Args_... args);
  std::string* mutable_user_avatar();
  PROTOBUF_NODISCARD std::string* release_user_avatar();
  void set_allocated_user_avatar(std::string* value);

  private:
  const std::string& _internal_user_avatar() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_avatar(
      const std::string& value);
  std::string* _internal_mutable_user_avatar();

  public:
  // .ActionOptionsState action_options = 10;
  bool has_action_options() const;
  void clear_action_options() ;
  const ::ActionOptionsState& action_options() const;
  PROTOBUF_NODISCARD ::ActionOptionsState* release_action_options();
  ::ActionOptionsState* mutable_action_options();
  void set_allocated_action_options(::ActionOptionsState* value);
  void unsafe_arena_set_allocated_action_options(::ActionOptionsState* value);
  ::ActionOptionsState* unsafe_arena_release_action_options();

  private:
  const ::ActionOptionsState& _internal_action_options() const;
  ::ActionOptionsState* _internal_mutable_action_options();

  public:
  // .PreActionOptionsState pre_action_options = 16;
  bool has_pre_action_options() const;
  void clear_pre_action_options() ;
  const ::PreActionOptionsState& pre_action_options() const;
  PROTOBUF_NODISCARD ::PreActionOptionsState* release_pre_action_options();
  ::PreActionOptionsState* mutable_pre_action_options();
  void set_allocated_pre_action_options(::PreActionOptionsState* value);
  void unsafe_arena_set_allocated_pre_action_options(::PreActionOptionsState* value);
  ::PreActionOptionsState* unsafe_arena_release_pre_action_options();

  private:
  const ::PreActionOptionsState& _internal_pre_action_options() const;
  ::PreActionOptionsState* _internal_mutable_pre_action_options();

  public:
  // int64 stake = 3;
  void clear_stake() ;
  ::int64_t stake() const;
  void set_stake(::int64_t value);

  private:
  ::int64_t _internal_stake() const;
  void _internal_set_stake(::int64_t value);

  public:
  // int64 bet = 6;
  void clear_bet() ;
  ::int64_t bet() const;
  void set_bet(::int64_t value);

  private:
  ::int64_t _internal_bet() const;
  void _internal_set_bet(::int64_t value);

  public:
  // int32 seat_idx = 1;
  void clear_seat_idx() ;
  ::int32_t seat_idx() const;
  void set_seat_idx(::int32_t value);

  private:
  ::int32_t _internal_seat_idx() const;
  void _internal_set_seat_idx(::int32_t value);

  public:
  // bool is_folded = 2;
  void clear_is_folded() ;
  bool is_folded() const;
  void set_is_folded(bool value);

  private:
  bool _internal_is_folded() const;
  void _internal_set_is_folded(bool value);

  public:
  // bool is_actions_available = 7;
  void clear_is_actions_available() ;
  bool is_actions_available() const;
  void set_is_actions_available(bool value);

  private:
  bool _internal_is_actions_available() const;
  void _internal_set_is_actions_available(bool value);

  public:
  // bool can_muck = 11;
  void clear_can_muck() ;
  bool can_muck() const;
  void set_can_muck(bool value);

  private:
  bool _internal_can_muck() const;
  void _internal_set_can_muck(bool value);

  public:
  // bool is_playing = 12;
  void clear_is_playing() ;
  bool is_playing() const;
  void set_is_playing(bool value);

  private:
  bool _internal_is_playing() const;
  void _internal_set_is_playing(bool value);

  public:
  // bool is_disconnected = 13;
  void clear_is_disconnected() ;
  bool is_disconnected() const;
  void set_is_disconnected(bool value);

  private:
  bool _internal_is_disconnected() const;
  void _internal_set_is_disconnected(bool value);

  public:
  // bool in_sitout = 14;
  void clear_in_sitout() ;
  bool in_sitout() const;
  void set_in_sitout(bool value);

  private:
  bool _internal_in_sitout() const;
  void _internal_set_in_sitout(bool value);

  public:
  // bool can_rebuy = 15;
  void clear_can_rebuy() ;
  bool can_rebuy() const;
  void set_can_rebuy(bool value);

  private:
  bool _internal_can_rebuy() const;
  void _internal_set_can_rebuy(bool value);

  public:
  // string last_action = 8;
  bool has_last_action() const;
  void clear_last_action() ;
  const std::string& last_action() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_last_action(Arg_&& arg, Args_... args);
  std::string* mutable_last_action();
  PROTOBUF_NODISCARD std::string* release_last_action();
  void set_allocated_last_action(std::string* value);

  private:
  const std::string& _internal_last_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_action(
      const std::string& value);
  std::string* _internal_mutable_last_action();

  public:
  // string last_pre_action = 17;
  bool has_last_pre_action() const;
  void clear_last_pre_action() ;
  const std::string& last_pre_action() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_last_pre_action(Arg_&& arg, Args_... args);
  std::string* mutable_last_pre_action();
  PROTOBUF_NODISCARD std::string* release_last_pre_action();
  void set_allocated_last_pre_action(std::string* value);

  private:
  const std::string& _internal_last_pre_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_pre_action(
      const std::string& value);
  std::string* _internal_mutable_last_pre_action();

  public:
  // .KickReason kick_reason = 18;
  bool has_kick_reason() const;
  void clear_kick_reason() ;
  ::KickReason kick_reason() const;
  void set_kick_reason(::KickReason value);

  private:
  ::KickReason _internal_kick_reason() const;
  void _internal_set_kick_reason(::KickReason value);

  public:
  void clear_optional_last_action();
  OptionalLastActionCase optional_last_action_case() const;
  void clear_optional_last_pre_action();
  OptionalLastPreActionCase optional_last_pre_action_case() const;
  void clear_optional_kick_reason();
  OptionalKickReasonCase optional_kick_reason_case() const;
  // @@protoc_insertion_point(class_scope:SeatState)
 private:
  class _Internal;
  void set_has_last_action();
  void set_has_last_pre_action();
  void set_has_kick_reason();
  inline bool has_optional_last_action() const;
  inline void clear_has_optional_last_action();
  inline bool has_optional_last_pre_action() const;
  inline void clear_has_optional_last_pre_action();
  inline bool has_optional_kick_reason() const;
  inline void clear_has_optional_kick_reason();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 18, 2,
      80, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_SeatState_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SeatState& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> cards_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr user_avatar_;
    ::ActionOptionsState* action_options_;
    ::PreActionOptionsState* pre_action_options_;
    ::int64_t stake_;
    ::int64_t bet_;
    ::int32_t seat_idx_;
    bool is_folded_;
    bool is_actions_available_;
    bool can_muck_;
    bool is_playing_;
    bool is_disconnected_;
    bool in_sitout_;
    bool can_rebuy_;
    union OptionalLastActionUnion {
      constexpr OptionalLastActionUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::google::protobuf::internal::ArenaStringPtr last_action_;
    } optional_last_action_;
    union OptionalLastPreActionUnion {
      constexpr OptionalLastPreActionUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::google::protobuf::internal::ArenaStringPtr last_pre_action_;
    } optional_last_pre_action_;
    union OptionalKickReasonUnion {
      constexpr OptionalKickReasonUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      int kick_reason_;
    } optional_kick_reason_;
    ::uint32_t _oneof_case_[3];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TableState_2eproto;
};
// -------------------------------------------------------------------

class PotInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:PotInfo) */ {
 public:
  inline PotInfo() : PotInfo(nullptr) {}
  ~PotInfo() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PotInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline PotInfo(const PotInfo& from) : PotInfo(nullptr, from) {}
  inline PotInfo(PotInfo&& from) noexcept
      : PotInfo(nullptr, std::move(from)) {}
  inline PotInfo& operator=(const PotInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PotInfo& operator=(PotInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PotInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PotInfo* internal_default_instance() {
    return reinterpret_cast<const PotInfo*>(
        &_PotInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(PotInfo& a, PotInfo& b) { a.Swap(&b); }
  inline void Swap(PotInfo* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PotInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PotInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<PotInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PotInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PotInfo& from) { PotInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PotInfo* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "PotInfo"; }

 protected:
  explicit PotInfo(::google::protobuf::Arena* arena);
  PotInfo(::google::protobuf::Arena* arena, const PotInfo& from);
  PotInfo(::google::protobuf::Arena* arena, PotInfo&& from) noexcept
      : PotInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSidePotsFieldNumber = 2,
    kAmountFieldNumber = 1,
  };
  // repeated .SidePotInfo side_pots = 2;
  int side_pots_size() const;
  private:
  int _internal_side_pots_size() const;

  public:
  void clear_side_pots() ;
  ::SidePotInfo* mutable_side_pots(int index);
  ::google::protobuf::RepeatedPtrField<::SidePotInfo>* mutable_side_pots();

  private:
  const ::google::protobuf::RepeatedPtrField<::SidePotInfo>& _internal_side_pots() const;
  ::google::protobuf::RepeatedPtrField<::SidePotInfo>* _internal_mutable_side_pots();
  public:
  const ::SidePotInfo& side_pots(int index) const;
  ::SidePotInfo* add_side_pots();
  const ::google::protobuf::RepeatedPtrField<::SidePotInfo>& side_pots() const;
  // int64 amount = 1;
  void clear_amount() ;
  ::int64_t amount() const;
  void set_amount(::int64_t value);

  private:
  ::int64_t _internal_amount() const;
  void _internal_set_amount(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:PotInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_PotInfo_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PotInfo& from_msg);
    ::google::protobuf::RepeatedPtrField< ::SidePotInfo > side_pots_;
    ::int64_t amount_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TableState_2eproto;
};
// -------------------------------------------------------------------

class CardsShowState final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:CardsShowState) */ {
 public:
  inline CardsShowState() : CardsShowState(nullptr) {}
  ~CardsShowState() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CardsShowState(
      ::google::protobuf::internal::ConstantInitialized);

  inline CardsShowState(const CardsShowState& from) : CardsShowState(nullptr, from) {}
  inline CardsShowState(CardsShowState&& from) noexcept
      : CardsShowState(nullptr, std::move(from)) {}
  inline CardsShowState& operator=(const CardsShowState& from) {
    CopyFrom(from);
    return *this;
  }
  inline CardsShowState& operator=(CardsShowState&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CardsShowState& default_instance() {
    return *internal_default_instance();
  }
  static inline const CardsShowState* internal_default_instance() {
    return reinterpret_cast<const CardsShowState*>(
        &_CardsShowState_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(CardsShowState& a, CardsShowState& b) { a.Swap(&b); }
  inline void Swap(CardsShowState* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CardsShowState* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CardsShowState* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<CardsShowState>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CardsShowState& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CardsShowState& from) { CardsShowState::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CardsShowState* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "CardsShowState"; }

 protected:
  explicit CardsShowState(::google::protobuf::Arena* arena);
  CardsShowState(::google::protobuf::Arena* arena, const CardsShowState& from);
  CardsShowState(::google::protobuf::Arena* arena, CardsShowState&& from) noexcept
      : CardsShowState(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPlayerInAllinFieldNumber = 1,
  };
  // repeated .PlayerInAllInState player_in_allin = 1;
  int player_in_allin_size() const;
  private:
  int _internal_player_in_allin_size() const;

  public:
  void clear_player_in_allin() ;
  ::PlayerInAllInState* mutable_player_in_allin(int index);
  ::google::protobuf::RepeatedPtrField<::PlayerInAllInState>* mutable_player_in_allin();

  private:
  const ::google::protobuf::RepeatedPtrField<::PlayerInAllInState>& _internal_player_in_allin() const;
  ::google::protobuf::RepeatedPtrField<::PlayerInAllInState>* _internal_mutable_player_in_allin();
  public:
  const ::PlayerInAllInState& player_in_allin(int index) const;
  ::PlayerInAllInState* add_player_in_allin();
  const ::google::protobuf::RepeatedPtrField<::PlayerInAllInState>& player_in_allin() const;
  // @@protoc_insertion_point(class_scope:CardsShowState)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_CardsShowState_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CardsShowState& from_msg);
    ::google::protobuf::RepeatedPtrField< ::PlayerInAllInState > player_in_allin_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TableState_2eproto;
};
// -------------------------------------------------------------------

class ShowdownState final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ShowdownState) */ {
 public:
  inline ShowdownState() : ShowdownState(nullptr) {}
  ~ShowdownState() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ShowdownState(
      ::google::protobuf::internal::ConstantInitialized);

  inline ShowdownState(const ShowdownState& from) : ShowdownState(nullptr, from) {}
  inline ShowdownState(ShowdownState&& from) noexcept
      : ShowdownState(nullptr, std::move(from)) {}
  inline ShowdownState& operator=(const ShowdownState& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShowdownState& operator=(ShowdownState&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShowdownState& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShowdownState* internal_default_instance() {
    return reinterpret_cast<const ShowdownState*>(
        &_ShowdownState_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(ShowdownState& a, ShowdownState& b) { a.Swap(&b); }
  inline void Swap(ShowdownState* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShowdownState* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShowdownState* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<ShowdownState>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ShowdownState& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ShowdownState& from) { ShowdownState::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ShowdownState* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "ShowdownState"; }

 protected:
  explicit ShowdownState(::google::protobuf::Arena* arena);
  ShowdownState(::google::protobuf::Arena* arena, const ShowdownState& from);
  ShowdownState(::google::protobuf::Arena* arena, ShowdownState&& from) noexcept
      : ShowdownState(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kWinnersFieldNumber = 1,
    kPlayerOnShowdownFieldNumber = 2,
    kHandPlayedInfoFieldNumber = 3,
  };
  // repeated .WinnerState winners = 1;
  int winners_size() const;
  private:
  int _internal_winners_size() const;

  public:
  void clear_winners() ;
  ::WinnerState* mutable_winners(int index);
  ::google::protobuf::RepeatedPtrField<::WinnerState>* mutable_winners();

  private:
  const ::google::protobuf::RepeatedPtrField<::WinnerState>& _internal_winners() const;
  ::google::protobuf::RepeatedPtrField<::WinnerState>* _internal_mutable_winners();
  public:
  const ::WinnerState& winners(int index) const;
  ::WinnerState* add_winners();
  const ::google::protobuf::RepeatedPtrField<::WinnerState>& winners() const;
  // repeated .PlayerOnShowdownState player_on_showdown = 2;
  int player_on_showdown_size() const;
  private:
  int _internal_player_on_showdown_size() const;

  public:
  void clear_player_on_showdown() ;
  ::PlayerOnShowdownState* mutable_player_on_showdown(int index);
  ::google::protobuf::RepeatedPtrField<::PlayerOnShowdownState>* mutable_player_on_showdown();

  private:
  const ::google::protobuf::RepeatedPtrField<::PlayerOnShowdownState>& _internal_player_on_showdown() const;
  ::google::protobuf::RepeatedPtrField<::PlayerOnShowdownState>* _internal_mutable_player_on_showdown();
  public:
  const ::PlayerOnShowdownState& player_on_showdown(int index) const;
  ::PlayerOnShowdownState* add_player_on_showdown();
  const ::google::protobuf::RepeatedPtrField<::PlayerOnShowdownState>& player_on_showdown() const;
  // .HandPlayedInfo hand_played_info = 3;
  bool has_hand_played_info() const;
  void clear_hand_played_info() ;
  const ::HandPlayedInfo& hand_played_info() const;
  PROTOBUF_NODISCARD ::HandPlayedInfo* release_hand_played_info();
  ::HandPlayedInfo* mutable_hand_played_info();
  void set_allocated_hand_played_info(::HandPlayedInfo* value);
  void unsafe_arena_set_allocated_hand_played_info(::HandPlayedInfo* value);
  ::HandPlayedInfo* unsafe_arena_release_hand_played_info();

  private:
  const ::HandPlayedInfo& _internal_hand_played_info() const;
  ::HandPlayedInfo* _internal_mutable_hand_played_info();

  public:
  // @@protoc_insertion_point(class_scope:ShowdownState)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 3,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_ShowdownState_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ShowdownState& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::WinnerState > winners_;
    ::google::protobuf::RepeatedPtrField< ::PlayerOnShowdownState > player_on_showdown_;
    ::HandPlayedInfo* hand_played_info_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TableState_2eproto;
};
// -------------------------------------------------------------------

class TableState final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:TableState) */ {
 public:
  inline TableState() : TableState(nullptr) {}
  ~TableState() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TableState(
      ::google::protobuf::internal::ConstantInitialized);

  inline TableState(const TableState& from) : TableState(nullptr, from) {}
  inline TableState(TableState&& from) noexcept
      : TableState(nullptr, std::move(from)) {}
  inline TableState& operator=(const TableState& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableState& operator=(TableState&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TableState& default_instance() {
    return *internal_default_instance();
  }
  static inline const TableState* internal_default_instance() {
    return reinterpret_cast<const TableState*>(
        &_TableState_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(TableState& a, TableState& b) { a.Swap(&b); }
  inline void Swap(TableState* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TableState* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TableState* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<TableState>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TableState& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TableState& from) { TableState::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TableState* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "TableState"; }

 protected:
  explicit TableState(::google::protobuf::Arena* arena);
  TableState(::google::protobuf::Arena* arena, const TableState& from);
  TableState(::google::protobuf::Arena* arena, TableState&& from) noexcept
      : TableState(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSeatsFieldNumber = 12,
    kCommunityCardsFieldNumber = 13,
    kShowdownStateFieldNumber = 14,
    kCardsShowStateFieldNumber = 16,
    kSpinMultipliersFieldNumber = 18,
    kTableNameFieldNumber = 17,
    kPotFieldNumber = 6,
    kTableIdFieldNumber = 2,
    kNtTypeFieldNumber = 1,
    kSeatIdxBbFieldNumber = 3,
    kSeatIdxSbFieldNumber = 4,
    kSeatIdxBtnFieldNumber = 5,
    kBbAmountFieldNumber = 7,
    kSbAmountFieldNumber = 8,
    kActionTimeLimitFieldNumber = 9,
    kTimebankActivatedFieldNumber = 10,
    kGameStateFieldNumber = 11,
    kActiveSpinsMultiplierFieldNumber = 19,
    kMySeatIdxFieldNumber = 15,
  };
  // repeated .SeatState seats = 12;
  int seats_size() const;
  private:
  int _internal_seats_size() const;

  public:
  void clear_seats() ;
  ::SeatState* mutable_seats(int index);
  ::google::protobuf::RepeatedPtrField<::SeatState>* mutable_seats();

  private:
  const ::google::protobuf::RepeatedPtrField<::SeatState>& _internal_seats() const;
  ::google::protobuf::RepeatedPtrField<::SeatState>* _internal_mutable_seats();
  public:
  const ::SeatState& seats(int index) const;
  ::SeatState* add_seats();
  const ::google::protobuf::RepeatedPtrField<::SeatState>& seats() const;
  // repeated string community_cards = 13;
  int community_cards_size() const;
  private:
  int _internal_community_cards_size() const;

  public:
  void clear_community_cards() ;
  const std::string& community_cards(int index) const;
  std::string* mutable_community_cards(int index);
  void set_community_cards(int index, const std::string& value);
  void set_community_cards(int index, std::string&& value);
  void set_community_cards(int index, const char* value);
  void set_community_cards(int index, const char* value, std::size_t size);
  void set_community_cards(int index, absl::string_view value);
  std::string* add_community_cards();
  void add_community_cards(const std::string& value);
  void add_community_cards(std::string&& value);
  void add_community_cards(const char* value);
  void add_community_cards(const char* value, std::size_t size);
  void add_community_cards(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& community_cards() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_community_cards();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_community_cards() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_community_cards();

  public:
  // repeated .ShowdownState showdown_state = 14;
  int showdown_state_size() const;
  private:
  int _internal_showdown_state_size() const;

  public:
  void clear_showdown_state() ;
  ::ShowdownState* mutable_showdown_state(int index);
  ::google::protobuf::RepeatedPtrField<::ShowdownState>* mutable_showdown_state();

  private:
  const ::google::protobuf::RepeatedPtrField<::ShowdownState>& _internal_showdown_state() const;
  ::google::protobuf::RepeatedPtrField<::ShowdownState>* _internal_mutable_showdown_state();
  public:
  const ::ShowdownState& showdown_state(int index) const;
  ::ShowdownState* add_showdown_state();
  const ::google::protobuf::RepeatedPtrField<::ShowdownState>& showdown_state() const;
  // repeated .CardsShowState cards_show_state = 16;
  int cards_show_state_size() const;
  private:
  int _internal_cards_show_state_size() const;

  public:
  void clear_cards_show_state() ;
  ::CardsShowState* mutable_cards_show_state(int index);
  ::google::protobuf::RepeatedPtrField<::CardsShowState>* mutable_cards_show_state();

  private:
  const ::google::protobuf::RepeatedPtrField<::CardsShowState>& _internal_cards_show_state() const;
  ::google::protobuf::RepeatedPtrField<::CardsShowState>* _internal_mutable_cards_show_state();
  public:
  const ::CardsShowState& cards_show_state(int index) const;
  ::CardsShowState* add_cards_show_state();
  const ::google::protobuf::RepeatedPtrField<::CardsShowState>& cards_show_state() const;
  // repeated uint64 spin_multipliers = 18;
  int spin_multipliers_size() const;
  private:
  int _internal_spin_multipliers_size() const;

  public:
  void clear_spin_multipliers() ;
  ::uint64_t spin_multipliers(int index) const;
  void set_spin_multipliers(int index, ::uint64_t value);
  void add_spin_multipliers(::uint64_t value);
  const ::google::protobuf::RepeatedField<::uint64_t>& spin_multipliers() const;
  ::google::protobuf::RepeatedField<::uint64_t>* mutable_spin_multipliers();

  private:
  const ::google::protobuf::RepeatedField<::uint64_t>& _internal_spin_multipliers() const;
  ::google::protobuf::RepeatedField<::uint64_t>* _internal_mutable_spin_multipliers();

  public:
  // string table_name = 17;
  void clear_table_name() ;
  const std::string& table_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_table_name(Arg_&& arg, Args_... args);
  std::string* mutable_table_name();
  PROTOBUF_NODISCARD std::string* release_table_name();
  void set_allocated_table_name(std::string* value);

  private:
  const std::string& _internal_table_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_table_name(
      const std::string& value);
  std::string* _internal_mutable_table_name();

  public:
  // .PotInfo pot = 6;
  bool has_pot() const;
  void clear_pot() ;
  const ::PotInfo& pot() const;
  PROTOBUF_NODISCARD ::PotInfo* release_pot();
  ::PotInfo* mutable_pot();
  void set_allocated_pot(::PotInfo* value);
  void unsafe_arena_set_allocated_pot(::PotInfo* value);
  ::PotInfo* unsafe_arena_release_pot();

  private:
  const ::PotInfo& _internal_pot() const;
  ::PotInfo* _internal_mutable_pot();

  public:
  // int64 table_id = 2;
  void clear_table_id() ;
  ::int64_t table_id() const;
  void set_table_id(::int64_t value);

  private:
  ::int64_t _internal_table_id() const;
  void _internal_set_table_id(::int64_t value);

  public:
  // int32 nt_type = 1;
  void clear_nt_type() ;
  ::int32_t nt_type() const;
  void set_nt_type(::int32_t value);

  private:
  ::int32_t _internal_nt_type() const;
  void _internal_set_nt_type(::int32_t value);

  public:
  // int32 seat_idx_bb = 3;
  void clear_seat_idx_bb() ;
  ::int32_t seat_idx_bb() const;
  void set_seat_idx_bb(::int32_t value);

  private:
  ::int32_t _internal_seat_idx_bb() const;
  void _internal_set_seat_idx_bb(::int32_t value);

  public:
  // int32 seat_idx_sb = 4;
  void clear_seat_idx_sb() ;
  ::int32_t seat_idx_sb() const;
  void set_seat_idx_sb(::int32_t value);

  private:
  ::int32_t _internal_seat_idx_sb() const;
  void _internal_set_seat_idx_sb(::int32_t value);

  public:
  // int32 seat_idx_btn = 5;
  void clear_seat_idx_btn() ;
  ::int32_t seat_idx_btn() const;
  void set_seat_idx_btn(::int32_t value);

  private:
  ::int32_t _internal_seat_idx_btn() const;
  void _internal_set_seat_idx_btn(::int32_t value);

  public:
  // int32 bb_amount = 7;
  void clear_bb_amount() ;
  ::int32_t bb_amount() const;
  void set_bb_amount(::int32_t value);

  private:
  ::int32_t _internal_bb_amount() const;
  void _internal_set_bb_amount(::int32_t value);

  public:
  // int32 sb_amount = 8;
  void clear_sb_amount() ;
  ::int32_t sb_amount() const;
  void set_sb_amount(::int32_t value);

  private:
  ::int32_t _internal_sb_amount() const;
  void _internal_set_sb_amount(::int32_t value);

  public:
  // int64 action_time_limit = 9;
  void clear_action_time_limit() ;
  ::int64_t action_time_limit() const;
  void set_action_time_limit(::int64_t value);

  private:
  ::int64_t _internal_action_time_limit() const;
  void _internal_set_action_time_limit(::int64_t value);

  public:
  // bool timebank_activated = 10;
  void clear_timebank_activated() ;
  bool timebank_activated() const;
  void set_timebank_activated(bool value);

  private:
  bool _internal_timebank_activated() const;
  void _internal_set_timebank_activated(bool value);

  public:
  // .GameState game_state = 11;
  void clear_game_state() ;
  ::GameState game_state() const;
  void set_game_state(::GameState value);

  private:
  ::GameState _internal_game_state() const;
  void _internal_set_game_state(::GameState value);

  public:
  // uint64 active_spins_multiplier = 19;
  void clear_active_spins_multiplier() ;
  ::uint64_t active_spins_multiplier() const;
  void set_active_spins_multiplier(::uint64_t value);

  private:
  ::uint64_t _internal_active_spins_multiplier() const;
  void _internal_set_active_spins_multiplier(::uint64_t value);

  public:
  // int32 my_seat_idx = 15;
  void clear_my_seat_idx() ;
  ::int32_t my_seat_idx() const;
  void set_my_seat_idx(::int32_t value);

  private:
  ::int32_t _internal_my_seat_idx() const;
  void _internal_set_my_seat_idx(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:TableState)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 19, 4,
      60, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_TableState_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TableState& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::SeatState > seats_;
    ::google::protobuf::RepeatedPtrField<std::string> community_cards_;
    ::google::protobuf::RepeatedPtrField< ::ShowdownState > showdown_state_;
    ::google::protobuf::RepeatedPtrField< ::CardsShowState > cards_show_state_;
    ::google::protobuf::RepeatedField<::uint64_t> spin_multipliers_;
    mutable ::google::protobuf::internal::CachedSize _spin_multipliers_cached_byte_size_;
    ::google::protobuf::internal::ArenaStringPtr table_name_;
    ::PotInfo* pot_;
    ::int64_t table_id_;
    ::int32_t nt_type_;
    ::int32_t seat_idx_bb_;
    ::int32_t seat_idx_sb_;
    ::int32_t seat_idx_btn_;
    ::int32_t bb_amount_;
    ::int32_t sb_amount_;
    ::int64_t action_time_limit_;
    bool timebank_activated_;
    int game_state_;
    ::uint64_t active_spins_multiplier_;
    ::int32_t my_seat_idx_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TableState_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// PlayerOnShowdownState

// int32 seat_idx = 1;
inline void PlayerOnShowdownState::clear_seat_idx() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.seat_idx_ = 0;
}
inline ::int32_t PlayerOnShowdownState::seat_idx() const {
  // @@protoc_insertion_point(field_get:PlayerOnShowdownState.seat_idx)
  return _internal_seat_idx();
}
inline void PlayerOnShowdownState::set_seat_idx(::int32_t value) {
  _internal_set_seat_idx(value);
  // @@protoc_insertion_point(field_set:PlayerOnShowdownState.seat_idx)
}
inline ::int32_t PlayerOnShowdownState::_internal_seat_idx() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.seat_idx_;
}
inline void PlayerOnShowdownState::_internal_set_seat_idx(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.seat_idx_ = value;
}

// bool muck = 2;
inline void PlayerOnShowdownState::clear_muck() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.muck_ = false;
}
inline bool PlayerOnShowdownState::muck() const {
  // @@protoc_insertion_point(field_get:PlayerOnShowdownState.muck)
  return _internal_muck();
}
inline void PlayerOnShowdownState::set_muck(bool value) {
  _internal_set_muck(value);
  // @@protoc_insertion_point(field_set:PlayerOnShowdownState.muck)
}
inline bool PlayerOnShowdownState::_internal_muck() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.muck_;
}
inline void PlayerOnShowdownState::_internal_set_muck(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.muck_ = value;
}

// repeated string cards = 3;
inline int PlayerOnShowdownState::_internal_cards_size() const {
  return _internal_cards().size();
}
inline int PlayerOnShowdownState::cards_size() const {
  return _internal_cards_size();
}
inline void PlayerOnShowdownState::clear_cards() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cards_.Clear();
}
inline std::string* PlayerOnShowdownState::add_cards()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_cards()->Add();
  // @@protoc_insertion_point(field_add_mutable:PlayerOnShowdownState.cards)
  return _s;
}
inline const std::string& PlayerOnShowdownState::cards(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PlayerOnShowdownState.cards)
  return _internal_cards().Get(index);
}
inline std::string* PlayerOnShowdownState::mutable_cards(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:PlayerOnShowdownState.cards)
  return _internal_mutable_cards()->Mutable(index);
}
inline void PlayerOnShowdownState::set_cards(int index, const std::string& value) {
  _internal_mutable_cards()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:PlayerOnShowdownState.cards)
}
inline void PlayerOnShowdownState::set_cards(int index, std::string&& value) {
  _internal_mutable_cards()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:PlayerOnShowdownState.cards)
}
inline void PlayerOnShowdownState::set_cards(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_cards()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:PlayerOnShowdownState.cards)
}
inline void PlayerOnShowdownState::set_cards(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_cards()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PlayerOnShowdownState.cards)
}
inline void PlayerOnShowdownState::set_cards(int index, absl::string_view value) {
  _internal_mutable_cards()->Mutable(index)->assign(
      value.data(), value.size());
  // @@protoc_insertion_point(field_set_string_piece:PlayerOnShowdownState.cards)
}
inline void PlayerOnShowdownState::add_cards(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_cards()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:PlayerOnShowdownState.cards)
}
inline void PlayerOnShowdownState::add_cards(std::string&& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_cards()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:PlayerOnShowdownState.cards)
}
inline void PlayerOnShowdownState::add_cards(const char* value) {
  ABSL_DCHECK(value != nullptr);
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_cards()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:PlayerOnShowdownState.cards)
}
inline void PlayerOnShowdownState::add_cards(const char* value, std::size_t size) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_cards()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:PlayerOnShowdownState.cards)
}
inline void PlayerOnShowdownState::add_cards(absl::string_view value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_cards()->Add()->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_add_string_piece:PlayerOnShowdownState.cards)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
PlayerOnShowdownState::cards() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:PlayerOnShowdownState.cards)
  return _internal_cards();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
PlayerOnShowdownState::mutable_cards() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:PlayerOnShowdownState.cards)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_cards();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
PlayerOnShowdownState::_internal_cards() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cards_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
PlayerOnShowdownState::_internal_mutable_cards() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.cards_;
}

// -------------------------------------------------------------------

// PlayerInAllInState

// int32 seat_idx = 1;
inline void PlayerInAllInState::clear_seat_idx() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.seat_idx_ = 0;
}
inline ::int32_t PlayerInAllInState::seat_idx() const {
  // @@protoc_insertion_point(field_get:PlayerInAllInState.seat_idx)
  return _internal_seat_idx();
}
inline void PlayerInAllInState::set_seat_idx(::int32_t value) {
  _internal_set_seat_idx(value);
  // @@protoc_insertion_point(field_set:PlayerInAllInState.seat_idx)
}
inline ::int32_t PlayerInAllInState::_internal_seat_idx() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.seat_idx_;
}
inline void PlayerInAllInState::_internal_set_seat_idx(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.seat_idx_ = value;
}

// repeated string cards = 2;
inline int PlayerInAllInState::_internal_cards_size() const {
  return _internal_cards().size();
}
inline int PlayerInAllInState::cards_size() const {
  return _internal_cards_size();
}
inline void PlayerInAllInState::clear_cards() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cards_.Clear();
}
inline std::string* PlayerInAllInState::add_cards()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_cards()->Add();
  // @@protoc_insertion_point(field_add_mutable:PlayerInAllInState.cards)
  return _s;
}
inline const std::string& PlayerInAllInState::cards(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PlayerInAllInState.cards)
  return _internal_cards().Get(index);
}
inline std::string* PlayerInAllInState::mutable_cards(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:PlayerInAllInState.cards)
  return _internal_mutable_cards()->Mutable(index);
}
inline void PlayerInAllInState::set_cards(int index, const std::string& value) {
  _internal_mutable_cards()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:PlayerInAllInState.cards)
}
inline void PlayerInAllInState::set_cards(int index, std::string&& value) {
  _internal_mutable_cards()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:PlayerInAllInState.cards)
}
inline void PlayerInAllInState::set_cards(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_cards()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:PlayerInAllInState.cards)
}
inline void PlayerInAllInState::set_cards(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_cards()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PlayerInAllInState.cards)
}
inline void PlayerInAllInState::set_cards(int index, absl::string_view value) {
  _internal_mutable_cards()->Mutable(index)->assign(
      value.data(), value.size());
  // @@protoc_insertion_point(field_set_string_piece:PlayerInAllInState.cards)
}
inline void PlayerInAllInState::add_cards(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_cards()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:PlayerInAllInState.cards)
}
inline void PlayerInAllInState::add_cards(std::string&& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_cards()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:PlayerInAllInState.cards)
}
inline void PlayerInAllInState::add_cards(const char* value) {
  ABSL_DCHECK(value != nullptr);
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_cards()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:PlayerInAllInState.cards)
}
inline void PlayerInAllInState::add_cards(const char* value, std::size_t size) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_cards()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:PlayerInAllInState.cards)
}
inline void PlayerInAllInState::add_cards(absl::string_view value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_cards()->Add()->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_add_string_piece:PlayerInAllInState.cards)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
PlayerInAllInState::cards() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:PlayerInAllInState.cards)
  return _internal_cards();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
PlayerInAllInState::mutable_cards() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:PlayerInAllInState.cards)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_cards();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
PlayerInAllInState::_internal_cards() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cards_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
PlayerInAllInState::_internal_mutable_cards() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.cards_;
}

// double win_percentage = 3;
inline void PlayerInAllInState::clear_win_percentage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.win_percentage_ = 0;
}
inline double PlayerInAllInState::win_percentage() const {
  // @@protoc_insertion_point(field_get:PlayerInAllInState.win_percentage)
  return _internal_win_percentage();
}
inline void PlayerInAllInState::set_win_percentage(double value) {
  _internal_set_win_percentage(value);
  // @@protoc_insertion_point(field_set:PlayerInAllInState.win_percentage)
}
inline double PlayerInAllInState::_internal_win_percentage() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.win_percentage_;
}
inline void PlayerInAllInState::_internal_set_win_percentage(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.win_percentage_ = value;
}

// -------------------------------------------------------------------

// CardsShowState

// repeated .PlayerInAllInState player_in_allin = 1;
inline int CardsShowState::_internal_player_in_allin_size() const {
  return _internal_player_in_allin().size();
}
inline int CardsShowState::player_in_allin_size() const {
  return _internal_player_in_allin_size();
}
inline void CardsShowState::clear_player_in_allin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.player_in_allin_.Clear();
}
inline ::PlayerInAllInState* CardsShowState::mutable_player_in_allin(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:CardsShowState.player_in_allin)
  return _internal_mutable_player_in_allin()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::PlayerInAllInState>* CardsShowState::mutable_player_in_allin()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:CardsShowState.player_in_allin)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_player_in_allin();
}
inline const ::PlayerInAllInState& CardsShowState::player_in_allin(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CardsShowState.player_in_allin)
  return _internal_player_in_allin().Get(index);
}
inline ::PlayerInAllInState* CardsShowState::add_player_in_allin() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::PlayerInAllInState* _add = _internal_mutable_player_in_allin()->Add();
  // @@protoc_insertion_point(field_add:CardsShowState.player_in_allin)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::PlayerInAllInState>& CardsShowState::player_in_allin() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:CardsShowState.player_in_allin)
  return _internal_player_in_allin();
}
inline const ::google::protobuf::RepeatedPtrField<::PlayerInAllInState>&
CardsShowState::_internal_player_in_allin() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.player_in_allin_;
}
inline ::google::protobuf::RepeatedPtrField<::PlayerInAllInState>*
CardsShowState::_internal_mutable_player_in_allin() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.player_in_allin_;
}

// -------------------------------------------------------------------

// WinnerState

// int32 seat_idx = 1;
inline void WinnerState::clear_seat_idx() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.seat_idx_ = 0;
}
inline ::int32_t WinnerState::seat_idx() const {
  // @@protoc_insertion_point(field_get:WinnerState.seat_idx)
  return _internal_seat_idx();
}
inline void WinnerState::set_seat_idx(::int32_t value) {
  _internal_set_seat_idx(value);
  // @@protoc_insertion_point(field_set:WinnerState.seat_idx)
}
inline ::int32_t WinnerState::_internal_seat_idx() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.seat_idx_;
}
inline void WinnerState::_internal_set_seat_idx(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.seat_idx_ = value;
}

// int64 money_reward = 2;
inline void WinnerState::clear_money_reward() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.money_reward_ = ::int64_t{0};
}
inline ::int64_t WinnerState::money_reward() const {
  // @@protoc_insertion_point(field_get:WinnerState.money_reward)
  return _internal_money_reward();
}
inline void WinnerState::set_money_reward(::int64_t value) {
  _internal_set_money_reward(value);
  // @@protoc_insertion_point(field_set:WinnerState.money_reward)
}
inline ::int64_t WinnerState::_internal_money_reward() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.money_reward_;
}
inline void WinnerState::_internal_set_money_reward(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.money_reward_ = value;
}

// repeated .SidePotShortStackPerAmountInfo side_pots_short_stacks = 3;
inline int WinnerState::_internal_side_pots_short_stacks_size() const {
  return _internal_side_pots_short_stacks().size();
}
inline int WinnerState::side_pots_short_stacks_size() const {
  return _internal_side_pots_short_stacks_size();
}
inline void WinnerState::clear_side_pots_short_stacks() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.side_pots_short_stacks_.Clear();
}
inline ::SidePotShortStackPerAmountInfo* WinnerState::mutable_side_pots_short_stacks(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:WinnerState.side_pots_short_stacks)
  return _internal_mutable_side_pots_short_stacks()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::SidePotShortStackPerAmountInfo>* WinnerState::mutable_side_pots_short_stacks()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:WinnerState.side_pots_short_stacks)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_side_pots_short_stacks();
}
inline const ::SidePotShortStackPerAmountInfo& WinnerState::side_pots_short_stacks(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:WinnerState.side_pots_short_stacks)
  return _internal_side_pots_short_stacks().Get(index);
}
inline ::SidePotShortStackPerAmountInfo* WinnerState::add_side_pots_short_stacks() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::SidePotShortStackPerAmountInfo* _add = _internal_mutable_side_pots_short_stacks()->Add();
  // @@protoc_insertion_point(field_add:WinnerState.side_pots_short_stacks)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::SidePotShortStackPerAmountInfo>& WinnerState::side_pots_short_stacks() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:WinnerState.side_pots_short_stacks)
  return _internal_side_pots_short_stacks();
}
inline const ::google::protobuf::RepeatedPtrField<::SidePotShortStackPerAmountInfo>&
WinnerState::_internal_side_pots_short_stacks() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.side_pots_short_stacks_;
}
inline ::google::protobuf::RepeatedPtrField<::SidePotShortStackPerAmountInfo>*
WinnerState::_internal_mutable_side_pots_short_stacks() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.side_pots_short_stacks_;
}

// -------------------------------------------------------------------

// ShowdownState

// repeated .WinnerState winners = 1;
inline int ShowdownState::_internal_winners_size() const {
  return _internal_winners().size();
}
inline int ShowdownState::winners_size() const {
  return _internal_winners_size();
}
inline void ShowdownState::clear_winners() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.winners_.Clear();
}
inline ::WinnerState* ShowdownState::mutable_winners(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:ShowdownState.winners)
  return _internal_mutable_winners()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::WinnerState>* ShowdownState::mutable_winners()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ShowdownState.winners)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_winners();
}
inline const ::WinnerState& ShowdownState::winners(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ShowdownState.winners)
  return _internal_winners().Get(index);
}
inline ::WinnerState* ShowdownState::add_winners() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::WinnerState* _add = _internal_mutable_winners()->Add();
  // @@protoc_insertion_point(field_add:ShowdownState.winners)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::WinnerState>& ShowdownState::winners() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ShowdownState.winners)
  return _internal_winners();
}
inline const ::google::protobuf::RepeatedPtrField<::WinnerState>&
ShowdownState::_internal_winners() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.winners_;
}
inline ::google::protobuf::RepeatedPtrField<::WinnerState>*
ShowdownState::_internal_mutable_winners() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.winners_;
}

// repeated .PlayerOnShowdownState player_on_showdown = 2;
inline int ShowdownState::_internal_player_on_showdown_size() const {
  return _internal_player_on_showdown().size();
}
inline int ShowdownState::player_on_showdown_size() const {
  return _internal_player_on_showdown_size();
}
inline void ShowdownState::clear_player_on_showdown() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.player_on_showdown_.Clear();
}
inline ::PlayerOnShowdownState* ShowdownState::mutable_player_on_showdown(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:ShowdownState.player_on_showdown)
  return _internal_mutable_player_on_showdown()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::PlayerOnShowdownState>* ShowdownState::mutable_player_on_showdown()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ShowdownState.player_on_showdown)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_player_on_showdown();
}
inline const ::PlayerOnShowdownState& ShowdownState::player_on_showdown(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ShowdownState.player_on_showdown)
  return _internal_player_on_showdown().Get(index);
}
inline ::PlayerOnShowdownState* ShowdownState::add_player_on_showdown() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::PlayerOnShowdownState* _add = _internal_mutable_player_on_showdown()->Add();
  // @@protoc_insertion_point(field_add:ShowdownState.player_on_showdown)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::PlayerOnShowdownState>& ShowdownState::player_on_showdown() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ShowdownState.player_on_showdown)
  return _internal_player_on_showdown();
}
inline const ::google::protobuf::RepeatedPtrField<::PlayerOnShowdownState>&
ShowdownState::_internal_player_on_showdown() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.player_on_showdown_;
}
inline ::google::protobuf::RepeatedPtrField<::PlayerOnShowdownState>*
ShowdownState::_internal_mutable_player_on_showdown() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.player_on_showdown_;
}

// .HandPlayedInfo hand_played_info = 3;
inline bool ShowdownState::has_hand_played_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.hand_played_info_ != nullptr);
  return value;
}
inline void ShowdownState::clear_hand_played_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.hand_played_info_ != nullptr) _impl_.hand_played_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::HandPlayedInfo& ShowdownState::_internal_hand_played_info() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::HandPlayedInfo* p = _impl_.hand_played_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::HandPlayedInfo&>(::_HandPlayedInfo_default_instance_);
}
inline const ::HandPlayedInfo& ShowdownState::hand_played_info() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ShowdownState.hand_played_info)
  return _internal_hand_played_info();
}
inline void ShowdownState::unsafe_arena_set_allocated_hand_played_info(::HandPlayedInfo* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.hand_played_info_);
  }
  _impl_.hand_played_info_ = reinterpret_cast<::HandPlayedInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ShowdownState.hand_played_info)
}
inline ::HandPlayedInfo* ShowdownState::release_hand_played_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HandPlayedInfo* released = _impl_.hand_played_info_;
  _impl_.hand_played_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::HandPlayedInfo* ShowdownState::unsafe_arena_release_hand_played_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ShowdownState.hand_played_info)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HandPlayedInfo* temp = _impl_.hand_played_info_;
  _impl_.hand_played_info_ = nullptr;
  return temp;
}
inline ::HandPlayedInfo* ShowdownState::_internal_mutable_hand_played_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.hand_played_info_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::HandPlayedInfo>(GetArena());
    _impl_.hand_played_info_ = reinterpret_cast<::HandPlayedInfo*>(p);
  }
  return _impl_.hand_played_info_;
}
inline ::HandPlayedInfo* ShowdownState::mutable_hand_played_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::HandPlayedInfo* _msg = _internal_mutable_hand_played_info();
  // @@protoc_insertion_point(field_mutable:ShowdownState.hand_played_info)
  return _msg;
}
inline void ShowdownState::set_allocated_hand_played_info(::HandPlayedInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.hand_played_info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.hand_played_info_ = reinterpret_cast<::HandPlayedInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:ShowdownState.hand_played_info)
}

// -------------------------------------------------------------------

// PreActionOptionsState

// repeated .PreActions seat_pre_actions = 1;
inline int PreActionOptionsState::_internal_seat_pre_actions_size() const {
  return _internal_seat_pre_actions().size();
}
inline int PreActionOptionsState::seat_pre_actions_size() const {
  return _internal_seat_pre_actions_size();
}
inline void PreActionOptionsState::clear_seat_pre_actions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.seat_pre_actions_.Clear();
}
inline ::PreActions PreActionOptionsState::seat_pre_actions(int index) const {
  // @@protoc_insertion_point(field_get:PreActionOptionsState.seat_pre_actions)
  return static_cast<::PreActions>(_internal_seat_pre_actions().Get(index));
}
inline void PreActionOptionsState::set_seat_pre_actions(int index, ::PreActions value) {
  _internal_mutable_seat_pre_actions()->Set(index, value);
  // @@protoc_insertion_point(field_set:PreActionOptionsState.seat_pre_actions)
}
inline void PreActionOptionsState::add_seat_pre_actions(::PreActions value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_seat_pre_actions()->Add(value);
  // @@protoc_insertion_point(field_add:PreActionOptionsState.seat_pre_actions)
}
inline const ::google::protobuf::RepeatedField<int>& PreActionOptionsState::seat_pre_actions() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:PreActionOptionsState.seat_pre_actions)
  return _internal_seat_pre_actions();
}
inline ::google::protobuf::RepeatedField<int>* PreActionOptionsState::mutable_seat_pre_actions()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:PreActionOptionsState.seat_pre_actions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_seat_pre_actions();
}
inline const ::google::protobuf::RepeatedField<int>& PreActionOptionsState::_internal_seat_pre_actions()
    const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.seat_pre_actions_;
}
inline ::google::protobuf::RepeatedField<int>* PreActionOptionsState::_internal_mutable_seat_pre_actions() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.seat_pre_actions_;
}

// -------------------------------------------------------------------

// ActionOptionsState

// int64 min_bet = 1;
inline void ActionOptionsState::clear_min_bet() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.min_bet_ = ::int64_t{0};
}
inline ::int64_t ActionOptionsState::min_bet() const {
  // @@protoc_insertion_point(field_get:ActionOptionsState.min_bet)
  return _internal_min_bet();
}
inline void ActionOptionsState::set_min_bet(::int64_t value) {
  _internal_set_min_bet(value);
  // @@protoc_insertion_point(field_set:ActionOptionsState.min_bet)
}
inline ::int64_t ActionOptionsState::_internal_min_bet() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.min_bet_;
}
inline void ActionOptionsState::_internal_set_min_bet(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.min_bet_ = value;
}

// int64 max_bet = 2;
inline void ActionOptionsState::clear_max_bet() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_bet_ = ::int64_t{0};
}
inline ::int64_t ActionOptionsState::max_bet() const {
  // @@protoc_insertion_point(field_get:ActionOptionsState.max_bet)
  return _internal_max_bet();
}
inline void ActionOptionsState::set_max_bet(::int64_t value) {
  _internal_set_max_bet(value);
  // @@protoc_insertion_point(field_set:ActionOptionsState.max_bet)
}
inline ::int64_t ActionOptionsState::_internal_max_bet() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.max_bet_;
}
inline void ActionOptionsState::_internal_set_max_bet(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_bet_ = value;
}

// repeated .SeatActions seat_actions = 3;
inline int ActionOptionsState::_internal_seat_actions_size() const {
  return _internal_seat_actions().size();
}
inline int ActionOptionsState::seat_actions_size() const {
  return _internal_seat_actions_size();
}
inline void ActionOptionsState::clear_seat_actions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.seat_actions_.Clear();
}
inline ::SeatActions ActionOptionsState::seat_actions(int index) const {
  // @@protoc_insertion_point(field_get:ActionOptionsState.seat_actions)
  return static_cast<::SeatActions>(_internal_seat_actions().Get(index));
}
inline void ActionOptionsState::set_seat_actions(int index, ::SeatActions value) {
  _internal_mutable_seat_actions()->Set(index, value);
  // @@protoc_insertion_point(field_set:ActionOptionsState.seat_actions)
}
inline void ActionOptionsState::add_seat_actions(::SeatActions value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_seat_actions()->Add(value);
  // @@protoc_insertion_point(field_add:ActionOptionsState.seat_actions)
}
inline const ::google::protobuf::RepeatedField<int>& ActionOptionsState::seat_actions() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ActionOptionsState.seat_actions)
  return _internal_seat_actions();
}
inline ::google::protobuf::RepeatedField<int>* ActionOptionsState::mutable_seat_actions()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ActionOptionsState.seat_actions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_seat_actions();
}
inline const ::google::protobuf::RepeatedField<int>& ActionOptionsState::_internal_seat_actions()
    const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.seat_actions_;
}
inline ::google::protobuf::RepeatedField<int>* ActionOptionsState::_internal_mutable_seat_actions() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.seat_actions_;
}

// -------------------------------------------------------------------

// SidePotShortStackPerAmountInfo

// int64 short_stack = 1;
inline void SidePotShortStackPerAmountInfo::clear_short_stack() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.short_stack_ = ::int64_t{0};
}
inline ::int64_t SidePotShortStackPerAmountInfo::short_stack() const {
  // @@protoc_insertion_point(field_get:SidePotShortStackPerAmountInfo.short_stack)
  return _internal_short_stack();
}
inline void SidePotShortStackPerAmountInfo::set_short_stack(::int64_t value) {
  _internal_set_short_stack(value);
  // @@protoc_insertion_point(field_set:SidePotShortStackPerAmountInfo.short_stack)
}
inline ::int64_t SidePotShortStackPerAmountInfo::_internal_short_stack() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.short_stack_;
}
inline void SidePotShortStackPerAmountInfo::_internal_set_short_stack(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.short_stack_ = value;
}

// int64 amount = 2;
inline void SidePotShortStackPerAmountInfo::clear_amount() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amount_ = ::int64_t{0};
}
inline ::int64_t SidePotShortStackPerAmountInfo::amount() const {
  // @@protoc_insertion_point(field_get:SidePotShortStackPerAmountInfo.amount)
  return _internal_amount();
}
inline void SidePotShortStackPerAmountInfo::set_amount(::int64_t value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:SidePotShortStackPerAmountInfo.amount)
}
inline ::int64_t SidePotShortStackPerAmountInfo::_internal_amount() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.amount_;
}
inline void SidePotShortStackPerAmountInfo::_internal_set_amount(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amount_ = value;
}

// -------------------------------------------------------------------

// SidePotInfo

// int64 short_stack = 1;
inline void SidePotInfo::clear_short_stack() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.short_stack_ = ::int64_t{0};
}
inline ::int64_t SidePotInfo::short_stack() const {
  // @@protoc_insertion_point(field_get:SidePotInfo.short_stack)
  return _internal_short_stack();
}
inline void SidePotInfo::set_short_stack(::int64_t value) {
  _internal_set_short_stack(value);
  // @@protoc_insertion_point(field_set:SidePotInfo.short_stack)
}
inline ::int64_t SidePotInfo::_internal_short_stack() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.short_stack_;
}
inline void SidePotInfo::_internal_set_short_stack(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.short_stack_ = value;
}

// int64 amount = 2;
inline void SidePotInfo::clear_amount() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amount_ = ::int64_t{0};
}
inline ::int64_t SidePotInfo::amount() const {
  // @@protoc_insertion_point(field_get:SidePotInfo.amount)
  return _internal_amount();
}
inline void SidePotInfo::set_amount(::int64_t value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:SidePotInfo.amount)
}
inline ::int64_t SidePotInfo::_internal_amount() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.amount_;
}
inline void SidePotInfo::_internal_set_amount(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amount_ = value;
}

// -------------------------------------------------------------------

// PotInfo

// int64 amount = 1;
inline void PotInfo::clear_amount() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amount_ = ::int64_t{0};
}
inline ::int64_t PotInfo::amount() const {
  // @@protoc_insertion_point(field_get:PotInfo.amount)
  return _internal_amount();
}
inline void PotInfo::set_amount(::int64_t value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:PotInfo.amount)
}
inline ::int64_t PotInfo::_internal_amount() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.amount_;
}
inline void PotInfo::_internal_set_amount(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.amount_ = value;
}

// repeated .SidePotInfo side_pots = 2;
inline int PotInfo::_internal_side_pots_size() const {
  return _internal_side_pots().size();
}
inline int PotInfo::side_pots_size() const {
  return _internal_side_pots_size();
}
inline void PotInfo::clear_side_pots() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.side_pots_.Clear();
}
inline ::SidePotInfo* PotInfo::mutable_side_pots(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:PotInfo.side_pots)
  return _internal_mutable_side_pots()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::SidePotInfo>* PotInfo::mutable_side_pots()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:PotInfo.side_pots)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_side_pots();
}
inline const ::SidePotInfo& PotInfo::side_pots(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PotInfo.side_pots)
  return _internal_side_pots().Get(index);
}
inline ::SidePotInfo* PotInfo::add_side_pots() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::SidePotInfo* _add = _internal_mutable_side_pots()->Add();
  // @@protoc_insertion_point(field_add:PotInfo.side_pots)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::SidePotInfo>& PotInfo::side_pots() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:PotInfo.side_pots)
  return _internal_side_pots();
}
inline const ::google::protobuf::RepeatedPtrField<::SidePotInfo>&
PotInfo::_internal_side_pots() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.side_pots_;
}
inline ::google::protobuf::RepeatedPtrField<::SidePotInfo>*
PotInfo::_internal_mutable_side_pots() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.side_pots_;
}

// -------------------------------------------------------------------

// SeatState

// int32 seat_idx = 1;
inline void SeatState::clear_seat_idx() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.seat_idx_ = 0;
}
inline ::int32_t SeatState::seat_idx() const {
  // @@protoc_insertion_point(field_get:SeatState.seat_idx)
  return _internal_seat_idx();
}
inline void SeatState::set_seat_idx(::int32_t value) {
  _internal_set_seat_idx(value);
  // @@protoc_insertion_point(field_set:SeatState.seat_idx)
}
inline ::int32_t SeatState::_internal_seat_idx() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.seat_idx_;
}
inline void SeatState::_internal_set_seat_idx(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.seat_idx_ = value;
}

// bool is_folded = 2;
inline void SeatState::clear_is_folded() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_folded_ = false;
}
inline bool SeatState::is_folded() const {
  // @@protoc_insertion_point(field_get:SeatState.is_folded)
  return _internal_is_folded();
}
inline void SeatState::set_is_folded(bool value) {
  _internal_set_is_folded(value);
  // @@protoc_insertion_point(field_set:SeatState.is_folded)
}
inline bool SeatState::_internal_is_folded() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_folded_;
}
inline void SeatState::_internal_set_is_folded(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_folded_ = value;
}

// int64 stake = 3;
inline void SeatState::clear_stake() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stake_ = ::int64_t{0};
}
inline ::int64_t SeatState::stake() const {
  // @@protoc_insertion_point(field_get:SeatState.stake)
  return _internal_stake();
}
inline void SeatState::set_stake(::int64_t value) {
  _internal_set_stake(value);
  // @@protoc_insertion_point(field_set:SeatState.stake)
}
inline ::int64_t SeatState::_internal_stake() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.stake_;
}
inline void SeatState::_internal_set_stake(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stake_ = value;
}

// string name = 4;
inline void SeatState::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& SeatState::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:SeatState.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SeatState::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:SeatState.name)
}
inline std::string* SeatState::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:SeatState.name)
  return _s;
}
inline const std::string& SeatState::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void SeatState::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* SeatState::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* SeatState::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:SeatState.name)
  return _impl_.name_.Release();
}
inline void SeatState::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SeatState.name)
}

// string user_avatar = 5;
inline void SeatState::clear_user_avatar() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_avatar_.ClearToEmpty();
}
inline const std::string& SeatState::user_avatar() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:SeatState.user_avatar)
  return _internal_user_avatar();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SeatState::set_user_avatar(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_avatar_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:SeatState.user_avatar)
}
inline std::string* SeatState::mutable_user_avatar() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_user_avatar();
  // @@protoc_insertion_point(field_mutable:SeatState.user_avatar)
  return _s;
}
inline const std::string& SeatState::_internal_user_avatar() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.user_avatar_.Get();
}
inline void SeatState::_internal_set_user_avatar(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_avatar_.Set(value, GetArena());
}
inline std::string* SeatState::_internal_mutable_user_avatar() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.user_avatar_.Mutable( GetArena());
}
inline std::string* SeatState::release_user_avatar() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:SeatState.user_avatar)
  return _impl_.user_avatar_.Release();
}
inline void SeatState::set_allocated_user_avatar(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_avatar_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.user_avatar_.IsDefault()) {
          _impl_.user_avatar_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SeatState.user_avatar)
}

// int64 bet = 6;
inline void SeatState::clear_bet() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bet_ = ::int64_t{0};
}
inline ::int64_t SeatState::bet() const {
  // @@protoc_insertion_point(field_get:SeatState.bet)
  return _internal_bet();
}
inline void SeatState::set_bet(::int64_t value) {
  _internal_set_bet(value);
  // @@protoc_insertion_point(field_set:SeatState.bet)
}
inline ::int64_t SeatState::_internal_bet() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bet_;
}
inline void SeatState::_internal_set_bet(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bet_ = value;
}

// bool is_actions_available = 7;
inline void SeatState::clear_is_actions_available() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_actions_available_ = false;
}
inline bool SeatState::is_actions_available() const {
  // @@protoc_insertion_point(field_get:SeatState.is_actions_available)
  return _internal_is_actions_available();
}
inline void SeatState::set_is_actions_available(bool value) {
  _internal_set_is_actions_available(value);
  // @@protoc_insertion_point(field_set:SeatState.is_actions_available)
}
inline bool SeatState::_internal_is_actions_available() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_actions_available_;
}
inline void SeatState::_internal_set_is_actions_available(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_actions_available_ = value;
}

// string last_action = 8;
inline bool SeatState::has_last_action() const {
  return optional_last_action_case() == kLastAction;
}
inline void SeatState::set_has_last_action() {
  _impl_._oneof_case_[0] = kLastAction;
}
inline void SeatState::clear_last_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (optional_last_action_case() == kLastAction) {
    _impl_.optional_last_action_.last_action_.Destroy();
    clear_has_optional_last_action();
  }
}
inline const std::string& SeatState::last_action() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:SeatState.last_action)
  return _internal_last_action();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SeatState::set_last_action(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (optional_last_action_case() != kLastAction) {
    clear_optional_last_action();

    set_has_last_action();
    _impl_.optional_last_action_.last_action_.InitDefault();
  }
  _impl_.optional_last_action_.last_action_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:SeatState.last_action)
}
inline std::string* SeatState::mutable_last_action() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_last_action();
  // @@protoc_insertion_point(field_mutable:SeatState.last_action)
  return _s;
}
inline const std::string& SeatState::_internal_last_action() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (optional_last_action_case() != kLastAction) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.optional_last_action_.last_action_.Get();
}
inline void SeatState::_internal_set_last_action(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (optional_last_action_case() != kLastAction) {
    clear_optional_last_action();

    set_has_last_action();
    _impl_.optional_last_action_.last_action_.InitDefault();
  }
  _impl_.optional_last_action_.last_action_.Set(value, GetArena());
}
inline std::string* SeatState::_internal_mutable_last_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (optional_last_action_case() != kLastAction) {
    clear_optional_last_action();

    set_has_last_action();
    _impl_.optional_last_action_.last_action_.InitDefault();
  }
  return _impl_.optional_last_action_.last_action_.Mutable( GetArena());
}
inline std::string* SeatState::release_last_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:SeatState.last_action)
  if (optional_last_action_case() != kLastAction) {
    return nullptr;
  }
  clear_has_optional_last_action();
  return _impl_.optional_last_action_.last_action_.Release();
}
inline void SeatState::set_allocated_last_action(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_optional_last_action()) {
    clear_optional_last_action();
  }
  if (value != nullptr) {
    set_has_last_action();
    _impl_.optional_last_action_.last_action_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:SeatState.last_action)
}

// repeated string cards = 9;
inline int SeatState::_internal_cards_size() const {
  return _internal_cards().size();
}
inline int SeatState::cards_size() const {
  return _internal_cards_size();
}
inline void SeatState::clear_cards() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cards_.Clear();
}
inline std::string* SeatState::add_cards()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_cards()->Add();
  // @@protoc_insertion_point(field_add_mutable:SeatState.cards)
  return _s;
}
inline const std::string& SeatState::cards(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:SeatState.cards)
  return _internal_cards().Get(index);
}
inline std::string* SeatState::mutable_cards(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:SeatState.cards)
  return _internal_mutable_cards()->Mutable(index);
}
inline void SeatState::set_cards(int index, const std::string& value) {
  _internal_mutable_cards()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:SeatState.cards)
}
inline void SeatState::set_cards(int index, std::string&& value) {
  _internal_mutable_cards()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:SeatState.cards)
}
inline void SeatState::set_cards(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_cards()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SeatState.cards)
}
inline void SeatState::set_cards(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_cards()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SeatState.cards)
}
inline void SeatState::set_cards(int index, absl::string_view value) {
  _internal_mutable_cards()->Mutable(index)->assign(
      value.data(), value.size());
  // @@protoc_insertion_point(field_set_string_piece:SeatState.cards)
}
inline void SeatState::add_cards(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_cards()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:SeatState.cards)
}
inline void SeatState::add_cards(std::string&& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_cards()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:SeatState.cards)
}
inline void SeatState::add_cards(const char* value) {
  ABSL_DCHECK(value != nullptr);
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_cards()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SeatState.cards)
}
inline void SeatState::add_cards(const char* value, std::size_t size) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_cards()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SeatState.cards)
}
inline void SeatState::add_cards(absl::string_view value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_cards()->Add()->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_add_string_piece:SeatState.cards)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
SeatState::cards() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:SeatState.cards)
  return _internal_cards();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
SeatState::mutable_cards() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:SeatState.cards)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_cards();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
SeatState::_internal_cards() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cards_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
SeatState::_internal_mutable_cards() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.cards_;
}

// .ActionOptionsState action_options = 10;
inline bool SeatState::has_action_options() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.action_options_ != nullptr);
  return value;
}
inline void SeatState::clear_action_options() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.action_options_ != nullptr) _impl_.action_options_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::ActionOptionsState& SeatState::_internal_action_options() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::ActionOptionsState* p = _impl_.action_options_;
  return p != nullptr ? *p : reinterpret_cast<const ::ActionOptionsState&>(::_ActionOptionsState_default_instance_);
}
inline const ::ActionOptionsState& SeatState::action_options() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:SeatState.action_options)
  return _internal_action_options();
}
inline void SeatState::unsafe_arena_set_allocated_action_options(::ActionOptionsState* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.action_options_);
  }
  _impl_.action_options_ = reinterpret_cast<::ActionOptionsState*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SeatState.action_options)
}
inline ::ActionOptionsState* SeatState::release_action_options() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ActionOptionsState* released = _impl_.action_options_;
  _impl_.action_options_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::ActionOptionsState* SeatState::unsafe_arena_release_action_options() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:SeatState.action_options)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ActionOptionsState* temp = _impl_.action_options_;
  _impl_.action_options_ = nullptr;
  return temp;
}
inline ::ActionOptionsState* SeatState::_internal_mutable_action_options() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.action_options_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::ActionOptionsState>(GetArena());
    _impl_.action_options_ = reinterpret_cast<::ActionOptionsState*>(p);
  }
  return _impl_.action_options_;
}
inline ::ActionOptionsState* SeatState::mutable_action_options() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::ActionOptionsState* _msg = _internal_mutable_action_options();
  // @@protoc_insertion_point(field_mutable:SeatState.action_options)
  return _msg;
}
inline void SeatState::set_allocated_action_options(::ActionOptionsState* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.action_options_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.action_options_ = reinterpret_cast<::ActionOptionsState*>(value);
  // @@protoc_insertion_point(field_set_allocated:SeatState.action_options)
}

// bool can_muck = 11;
inline void SeatState::clear_can_muck() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.can_muck_ = false;
}
inline bool SeatState::can_muck() const {
  // @@protoc_insertion_point(field_get:SeatState.can_muck)
  return _internal_can_muck();
}
inline void SeatState::set_can_muck(bool value) {
  _internal_set_can_muck(value);
  // @@protoc_insertion_point(field_set:SeatState.can_muck)
}
inline bool SeatState::_internal_can_muck() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.can_muck_;
}
inline void SeatState::_internal_set_can_muck(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.can_muck_ = value;
}

// bool is_playing = 12;
inline void SeatState::clear_is_playing() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_playing_ = false;
}
inline bool SeatState::is_playing() const {
  // @@protoc_insertion_point(field_get:SeatState.is_playing)
  return _internal_is_playing();
}
inline void SeatState::set_is_playing(bool value) {
  _internal_set_is_playing(value);
  // @@protoc_insertion_point(field_set:SeatState.is_playing)
}
inline bool SeatState::_internal_is_playing() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_playing_;
}
inline void SeatState::_internal_set_is_playing(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_playing_ = value;
}

// bool is_disconnected = 13;
inline void SeatState::clear_is_disconnected() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_disconnected_ = false;
}
inline bool SeatState::is_disconnected() const {
  // @@protoc_insertion_point(field_get:SeatState.is_disconnected)
  return _internal_is_disconnected();
}
inline void SeatState::set_is_disconnected(bool value) {
  _internal_set_is_disconnected(value);
  // @@protoc_insertion_point(field_set:SeatState.is_disconnected)
}
inline bool SeatState::_internal_is_disconnected() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_disconnected_;
}
inline void SeatState::_internal_set_is_disconnected(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_disconnected_ = value;
}

// bool in_sitout = 14;
inline void SeatState::clear_in_sitout() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.in_sitout_ = false;
}
inline bool SeatState::in_sitout() const {
  // @@protoc_insertion_point(field_get:SeatState.in_sitout)
  return _internal_in_sitout();
}
inline void SeatState::set_in_sitout(bool value) {
  _internal_set_in_sitout(value);
  // @@protoc_insertion_point(field_set:SeatState.in_sitout)
}
inline bool SeatState::_internal_in_sitout() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.in_sitout_;
}
inline void SeatState::_internal_set_in_sitout(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.in_sitout_ = value;
}

// bool can_rebuy = 15;
inline void SeatState::clear_can_rebuy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.can_rebuy_ = false;
}
inline bool SeatState::can_rebuy() const {
  // @@protoc_insertion_point(field_get:SeatState.can_rebuy)
  return _internal_can_rebuy();
}
inline void SeatState::set_can_rebuy(bool value) {
  _internal_set_can_rebuy(value);
  // @@protoc_insertion_point(field_set:SeatState.can_rebuy)
}
inline bool SeatState::_internal_can_rebuy() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.can_rebuy_;
}
inline void SeatState::_internal_set_can_rebuy(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.can_rebuy_ = value;
}

// .PreActionOptionsState pre_action_options = 16;
inline bool SeatState::has_pre_action_options() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pre_action_options_ != nullptr);
  return value;
}
inline void SeatState::clear_pre_action_options() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.pre_action_options_ != nullptr) _impl_.pre_action_options_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::PreActionOptionsState& SeatState::_internal_pre_action_options() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::PreActionOptionsState* p = _impl_.pre_action_options_;
  return p != nullptr ? *p : reinterpret_cast<const ::PreActionOptionsState&>(::_PreActionOptionsState_default_instance_);
}
inline const ::PreActionOptionsState& SeatState::pre_action_options() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:SeatState.pre_action_options)
  return _internal_pre_action_options();
}
inline void SeatState::unsafe_arena_set_allocated_pre_action_options(::PreActionOptionsState* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pre_action_options_);
  }
  _impl_.pre_action_options_ = reinterpret_cast<::PreActionOptionsState*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SeatState.pre_action_options)
}
inline ::PreActionOptionsState* SeatState::release_pre_action_options() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PreActionOptionsState* released = _impl_.pre_action_options_;
  _impl_.pre_action_options_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::PreActionOptionsState* SeatState::unsafe_arena_release_pre_action_options() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:SeatState.pre_action_options)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PreActionOptionsState* temp = _impl_.pre_action_options_;
  _impl_.pre_action_options_ = nullptr;
  return temp;
}
inline ::PreActionOptionsState* SeatState::_internal_mutable_pre_action_options() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.pre_action_options_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::PreActionOptionsState>(GetArena());
    _impl_.pre_action_options_ = reinterpret_cast<::PreActionOptionsState*>(p);
  }
  return _impl_.pre_action_options_;
}
inline ::PreActionOptionsState* SeatState::mutable_pre_action_options() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::PreActionOptionsState* _msg = _internal_mutable_pre_action_options();
  // @@protoc_insertion_point(field_mutable:SeatState.pre_action_options)
  return _msg;
}
inline void SeatState::set_allocated_pre_action_options(::PreActionOptionsState* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.pre_action_options_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.pre_action_options_ = reinterpret_cast<::PreActionOptionsState*>(value);
  // @@protoc_insertion_point(field_set_allocated:SeatState.pre_action_options)
}

// string last_pre_action = 17;
inline bool SeatState::has_last_pre_action() const {
  return optional_last_pre_action_case() == kLastPreAction;
}
inline void SeatState::set_has_last_pre_action() {
  _impl_._oneof_case_[1] = kLastPreAction;
}
inline void SeatState::clear_last_pre_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (optional_last_pre_action_case() == kLastPreAction) {
    _impl_.optional_last_pre_action_.last_pre_action_.Destroy();
    clear_has_optional_last_pre_action();
  }
}
inline const std::string& SeatState::last_pre_action() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:SeatState.last_pre_action)
  return _internal_last_pre_action();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SeatState::set_last_pre_action(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (optional_last_pre_action_case() != kLastPreAction) {
    clear_optional_last_pre_action();

    set_has_last_pre_action();
    _impl_.optional_last_pre_action_.last_pre_action_.InitDefault();
  }
  _impl_.optional_last_pre_action_.last_pre_action_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:SeatState.last_pre_action)
}
inline std::string* SeatState::mutable_last_pre_action() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_last_pre_action();
  // @@protoc_insertion_point(field_mutable:SeatState.last_pre_action)
  return _s;
}
inline const std::string& SeatState::_internal_last_pre_action() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (optional_last_pre_action_case() != kLastPreAction) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.optional_last_pre_action_.last_pre_action_.Get();
}
inline void SeatState::_internal_set_last_pre_action(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (optional_last_pre_action_case() != kLastPreAction) {
    clear_optional_last_pre_action();

    set_has_last_pre_action();
    _impl_.optional_last_pre_action_.last_pre_action_.InitDefault();
  }
  _impl_.optional_last_pre_action_.last_pre_action_.Set(value, GetArena());
}
inline std::string* SeatState::_internal_mutable_last_pre_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (optional_last_pre_action_case() != kLastPreAction) {
    clear_optional_last_pre_action();

    set_has_last_pre_action();
    _impl_.optional_last_pre_action_.last_pre_action_.InitDefault();
  }
  return _impl_.optional_last_pre_action_.last_pre_action_.Mutable( GetArena());
}
inline std::string* SeatState::release_last_pre_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:SeatState.last_pre_action)
  if (optional_last_pre_action_case() != kLastPreAction) {
    return nullptr;
  }
  clear_has_optional_last_pre_action();
  return _impl_.optional_last_pre_action_.last_pre_action_.Release();
}
inline void SeatState::set_allocated_last_pre_action(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_optional_last_pre_action()) {
    clear_optional_last_pre_action();
  }
  if (value != nullptr) {
    set_has_last_pre_action();
    _impl_.optional_last_pre_action_.last_pre_action_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:SeatState.last_pre_action)
}

// .KickReason kick_reason = 18;
inline bool SeatState::has_kick_reason() const {
  return optional_kick_reason_case() == kKickReason;
}
inline void SeatState::set_has_kick_reason() {
  _impl_._oneof_case_[2] = kKickReason;
}
inline void SeatState::clear_kick_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (optional_kick_reason_case() == kKickReason) {
    _impl_.optional_kick_reason_.kick_reason_ = 0;
    clear_has_optional_kick_reason();
  }
}
inline ::KickReason SeatState::kick_reason() const {
  // @@protoc_insertion_point(field_get:SeatState.kick_reason)
  return _internal_kick_reason();
}
inline void SeatState::set_kick_reason(::KickReason value) {
  if (optional_kick_reason_case() != kKickReason) {
    clear_optional_kick_reason();
    set_has_kick_reason();
  }
  _impl_.optional_kick_reason_.kick_reason_ = value;
  // @@protoc_insertion_point(field_set:SeatState.kick_reason)
}
inline ::KickReason SeatState::_internal_kick_reason() const {
  if (optional_kick_reason_case() == kKickReason) {
    return static_cast<::KickReason>(_impl_.optional_kick_reason_.kick_reason_);
  }
  return static_cast<::KickReason>(0);
}

inline bool SeatState::has_optional_last_action() const {
  return optional_last_action_case() != OPTIONAL_LAST_ACTION_NOT_SET;
}
inline void SeatState::clear_has_optional_last_action() {
  _impl_._oneof_case_[0] = OPTIONAL_LAST_ACTION_NOT_SET;
}
inline bool SeatState::has_optional_last_pre_action() const {
  return optional_last_pre_action_case() != OPTIONAL_LAST_PRE_ACTION_NOT_SET;
}
inline void SeatState::clear_has_optional_last_pre_action() {
  _impl_._oneof_case_[1] = OPTIONAL_LAST_PRE_ACTION_NOT_SET;
}
inline bool SeatState::has_optional_kick_reason() const {
  return optional_kick_reason_case() != OPTIONAL_KICK_REASON_NOT_SET;
}
inline void SeatState::clear_has_optional_kick_reason() {
  _impl_._oneof_case_[2] = OPTIONAL_KICK_REASON_NOT_SET;
}
inline SeatState::OptionalLastActionCase SeatState::optional_last_action_case() const {
  return SeatState::OptionalLastActionCase(_impl_._oneof_case_[0]);
}
inline SeatState::OptionalLastPreActionCase SeatState::optional_last_pre_action_case() const {
  return SeatState::OptionalLastPreActionCase(_impl_._oneof_case_[1]);
}
inline SeatState::OptionalKickReasonCase SeatState::optional_kick_reason_case() const {
  return SeatState::OptionalKickReasonCase(_impl_._oneof_case_[2]);
}
// -------------------------------------------------------------------

// TableState

// int32 nt_type = 1;
inline void TableState::clear_nt_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nt_type_ = 0;
}
inline ::int32_t TableState::nt_type() const {
  // @@protoc_insertion_point(field_get:TableState.nt_type)
  return _internal_nt_type();
}
inline void TableState::set_nt_type(::int32_t value) {
  _internal_set_nt_type(value);
  // @@protoc_insertion_point(field_set:TableState.nt_type)
}
inline ::int32_t TableState::_internal_nt_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.nt_type_;
}
inline void TableState::_internal_set_nt_type(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nt_type_ = value;
}

// int64 table_id = 2;
inline void TableState::clear_table_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.table_id_ = ::int64_t{0};
}
inline ::int64_t TableState::table_id() const {
  // @@protoc_insertion_point(field_get:TableState.table_id)
  return _internal_table_id();
}
inline void TableState::set_table_id(::int64_t value) {
  _internal_set_table_id(value);
  // @@protoc_insertion_point(field_set:TableState.table_id)
}
inline ::int64_t TableState::_internal_table_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.table_id_;
}
inline void TableState::_internal_set_table_id(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.table_id_ = value;
}

// int32 seat_idx_bb = 3;
inline void TableState::clear_seat_idx_bb() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.seat_idx_bb_ = 0;
}
inline ::int32_t TableState::seat_idx_bb() const {
  // @@protoc_insertion_point(field_get:TableState.seat_idx_bb)
  return _internal_seat_idx_bb();
}
inline void TableState::set_seat_idx_bb(::int32_t value) {
  _internal_set_seat_idx_bb(value);
  // @@protoc_insertion_point(field_set:TableState.seat_idx_bb)
}
inline ::int32_t TableState::_internal_seat_idx_bb() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.seat_idx_bb_;
}
inline void TableState::_internal_set_seat_idx_bb(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.seat_idx_bb_ = value;
}

// int32 seat_idx_sb = 4;
inline void TableState::clear_seat_idx_sb() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.seat_idx_sb_ = 0;
}
inline ::int32_t TableState::seat_idx_sb() const {
  // @@protoc_insertion_point(field_get:TableState.seat_idx_sb)
  return _internal_seat_idx_sb();
}
inline void TableState::set_seat_idx_sb(::int32_t value) {
  _internal_set_seat_idx_sb(value);
  // @@protoc_insertion_point(field_set:TableState.seat_idx_sb)
}
inline ::int32_t TableState::_internal_seat_idx_sb() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.seat_idx_sb_;
}
inline void TableState::_internal_set_seat_idx_sb(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.seat_idx_sb_ = value;
}

// int32 seat_idx_btn = 5;
inline void TableState::clear_seat_idx_btn() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.seat_idx_btn_ = 0;
}
inline ::int32_t TableState::seat_idx_btn() const {
  // @@protoc_insertion_point(field_get:TableState.seat_idx_btn)
  return _internal_seat_idx_btn();
}
inline void TableState::set_seat_idx_btn(::int32_t value) {
  _internal_set_seat_idx_btn(value);
  // @@protoc_insertion_point(field_set:TableState.seat_idx_btn)
}
inline ::int32_t TableState::_internal_seat_idx_btn() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.seat_idx_btn_;
}
inline void TableState::_internal_set_seat_idx_btn(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.seat_idx_btn_ = value;
}

// .PotInfo pot = 6;
inline bool TableState::has_pot() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pot_ != nullptr);
  return value;
}
inline void TableState::clear_pot() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.pot_ != nullptr) _impl_.pot_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::PotInfo& TableState::_internal_pot() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::PotInfo* p = _impl_.pot_;
  return p != nullptr ? *p : reinterpret_cast<const ::PotInfo&>(::_PotInfo_default_instance_);
}
inline const ::PotInfo& TableState::pot() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TableState.pot)
  return _internal_pot();
}
inline void TableState::unsafe_arena_set_allocated_pot(::PotInfo* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pot_);
  }
  _impl_.pot_ = reinterpret_cast<::PotInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TableState.pot)
}
inline ::PotInfo* TableState::release_pot() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PotInfo* released = _impl_.pot_;
  _impl_.pot_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::PotInfo* TableState::unsafe_arena_release_pot() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:TableState.pot)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PotInfo* temp = _impl_.pot_;
  _impl_.pot_ = nullptr;
  return temp;
}
inline ::PotInfo* TableState::_internal_mutable_pot() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.pot_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::PotInfo>(GetArena());
    _impl_.pot_ = reinterpret_cast<::PotInfo*>(p);
  }
  return _impl_.pot_;
}
inline ::PotInfo* TableState::mutable_pot() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::PotInfo* _msg = _internal_mutable_pot();
  // @@protoc_insertion_point(field_mutable:TableState.pot)
  return _msg;
}
inline void TableState::set_allocated_pot(::PotInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.pot_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.pot_ = reinterpret_cast<::PotInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:TableState.pot)
}

// int32 bb_amount = 7;
inline void TableState::clear_bb_amount() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bb_amount_ = 0;
}
inline ::int32_t TableState::bb_amount() const {
  // @@protoc_insertion_point(field_get:TableState.bb_amount)
  return _internal_bb_amount();
}
inline void TableState::set_bb_amount(::int32_t value) {
  _internal_set_bb_amount(value);
  // @@protoc_insertion_point(field_set:TableState.bb_amount)
}
inline ::int32_t TableState::_internal_bb_amount() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bb_amount_;
}
inline void TableState::_internal_set_bb_amount(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bb_amount_ = value;
}

// int32 sb_amount = 8;
inline void TableState::clear_sb_amount() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sb_amount_ = 0;
}
inline ::int32_t TableState::sb_amount() const {
  // @@protoc_insertion_point(field_get:TableState.sb_amount)
  return _internal_sb_amount();
}
inline void TableState::set_sb_amount(::int32_t value) {
  _internal_set_sb_amount(value);
  // @@protoc_insertion_point(field_set:TableState.sb_amount)
}
inline ::int32_t TableState::_internal_sb_amount() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sb_amount_;
}
inline void TableState::_internal_set_sb_amount(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sb_amount_ = value;
}

// int64 action_time_limit = 9;
inline void TableState::clear_action_time_limit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_time_limit_ = ::int64_t{0};
}
inline ::int64_t TableState::action_time_limit() const {
  // @@protoc_insertion_point(field_get:TableState.action_time_limit)
  return _internal_action_time_limit();
}
inline void TableState::set_action_time_limit(::int64_t value) {
  _internal_set_action_time_limit(value);
  // @@protoc_insertion_point(field_set:TableState.action_time_limit)
}
inline ::int64_t TableState::_internal_action_time_limit() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.action_time_limit_;
}
inline void TableState::_internal_set_action_time_limit(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_time_limit_ = value;
}

// bool timebank_activated = 10;
inline void TableState::clear_timebank_activated() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timebank_activated_ = false;
}
inline bool TableState::timebank_activated() const {
  // @@protoc_insertion_point(field_get:TableState.timebank_activated)
  return _internal_timebank_activated();
}
inline void TableState::set_timebank_activated(bool value) {
  _internal_set_timebank_activated(value);
  // @@protoc_insertion_point(field_set:TableState.timebank_activated)
}
inline bool TableState::_internal_timebank_activated() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timebank_activated_;
}
inline void TableState::_internal_set_timebank_activated(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timebank_activated_ = value;
}

// .GameState game_state = 11;
inline void TableState::clear_game_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.game_state_ = 0;
}
inline ::GameState TableState::game_state() const {
  // @@protoc_insertion_point(field_get:TableState.game_state)
  return _internal_game_state();
}
inline void TableState::set_game_state(::GameState value) {
  _internal_set_game_state(value);
  // @@protoc_insertion_point(field_set:TableState.game_state)
}
inline ::GameState TableState::_internal_game_state() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::GameState>(_impl_.game_state_);
}
inline void TableState::_internal_set_game_state(::GameState value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.game_state_ = value;
}

// repeated .SeatState seats = 12;
inline int TableState::_internal_seats_size() const {
  return _internal_seats().size();
}
inline int TableState::seats_size() const {
  return _internal_seats_size();
}
inline void TableState::clear_seats() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.seats_.Clear();
}
inline ::SeatState* TableState::mutable_seats(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:TableState.seats)
  return _internal_mutable_seats()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::SeatState>* TableState::mutable_seats()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:TableState.seats)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_seats();
}
inline const ::SeatState& TableState::seats(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TableState.seats)
  return _internal_seats().Get(index);
}
inline ::SeatState* TableState::add_seats() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::SeatState* _add = _internal_mutable_seats()->Add();
  // @@protoc_insertion_point(field_add:TableState.seats)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::SeatState>& TableState::seats() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:TableState.seats)
  return _internal_seats();
}
inline const ::google::protobuf::RepeatedPtrField<::SeatState>&
TableState::_internal_seats() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.seats_;
}
inline ::google::protobuf::RepeatedPtrField<::SeatState>*
TableState::_internal_mutable_seats() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.seats_;
}

// repeated string community_cards = 13;
inline int TableState::_internal_community_cards_size() const {
  return _internal_community_cards().size();
}
inline int TableState::community_cards_size() const {
  return _internal_community_cards_size();
}
inline void TableState::clear_community_cards() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.community_cards_.Clear();
}
inline std::string* TableState::add_community_cards()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_community_cards()->Add();
  // @@protoc_insertion_point(field_add_mutable:TableState.community_cards)
  return _s;
}
inline const std::string& TableState::community_cards(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TableState.community_cards)
  return _internal_community_cards().Get(index);
}
inline std::string* TableState::mutable_community_cards(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:TableState.community_cards)
  return _internal_mutable_community_cards()->Mutable(index);
}
inline void TableState::set_community_cards(int index, const std::string& value) {
  _internal_mutable_community_cards()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:TableState.community_cards)
}
inline void TableState::set_community_cards(int index, std::string&& value) {
  _internal_mutable_community_cards()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:TableState.community_cards)
}
inline void TableState::set_community_cards(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_community_cards()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TableState.community_cards)
}
inline void TableState::set_community_cards(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_community_cards()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TableState.community_cards)
}
inline void TableState::set_community_cards(int index, absl::string_view value) {
  _internal_mutable_community_cards()->Mutable(index)->assign(
      value.data(), value.size());
  // @@protoc_insertion_point(field_set_string_piece:TableState.community_cards)
}
inline void TableState::add_community_cards(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_community_cards()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:TableState.community_cards)
}
inline void TableState::add_community_cards(std::string&& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_community_cards()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:TableState.community_cards)
}
inline void TableState::add_community_cards(const char* value) {
  ABSL_DCHECK(value != nullptr);
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_community_cards()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TableState.community_cards)
}
inline void TableState::add_community_cards(const char* value, std::size_t size) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_community_cards()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TableState.community_cards)
}
inline void TableState::add_community_cards(absl::string_view value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_community_cards()->Add()->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_add_string_piece:TableState.community_cards)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
TableState::community_cards() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:TableState.community_cards)
  return _internal_community_cards();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
TableState::mutable_community_cards() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:TableState.community_cards)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_community_cards();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
TableState::_internal_community_cards() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.community_cards_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
TableState::_internal_mutable_community_cards() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.community_cards_;
}

// repeated .ShowdownState showdown_state = 14;
inline int TableState::_internal_showdown_state_size() const {
  return _internal_showdown_state().size();
}
inline int TableState::showdown_state_size() const {
  return _internal_showdown_state_size();
}
inline void TableState::clear_showdown_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.showdown_state_.Clear();
}
inline ::ShowdownState* TableState::mutable_showdown_state(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:TableState.showdown_state)
  return _internal_mutable_showdown_state()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::ShowdownState>* TableState::mutable_showdown_state()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:TableState.showdown_state)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_showdown_state();
}
inline const ::ShowdownState& TableState::showdown_state(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TableState.showdown_state)
  return _internal_showdown_state().Get(index);
}
inline ::ShowdownState* TableState::add_showdown_state() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::ShowdownState* _add = _internal_mutable_showdown_state()->Add();
  // @@protoc_insertion_point(field_add:TableState.showdown_state)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::ShowdownState>& TableState::showdown_state() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:TableState.showdown_state)
  return _internal_showdown_state();
}
inline const ::google::protobuf::RepeatedPtrField<::ShowdownState>&
TableState::_internal_showdown_state() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.showdown_state_;
}
inline ::google::protobuf::RepeatedPtrField<::ShowdownState>*
TableState::_internal_mutable_showdown_state() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.showdown_state_;
}

// int32 my_seat_idx = 15;
inline void TableState::clear_my_seat_idx() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.my_seat_idx_ = 0;
}
inline ::int32_t TableState::my_seat_idx() const {
  // @@protoc_insertion_point(field_get:TableState.my_seat_idx)
  return _internal_my_seat_idx();
}
inline void TableState::set_my_seat_idx(::int32_t value) {
  _internal_set_my_seat_idx(value);
  // @@protoc_insertion_point(field_set:TableState.my_seat_idx)
}
inline ::int32_t TableState::_internal_my_seat_idx() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.my_seat_idx_;
}
inline void TableState::_internal_set_my_seat_idx(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.my_seat_idx_ = value;
}

// repeated .CardsShowState cards_show_state = 16;
inline int TableState::_internal_cards_show_state_size() const {
  return _internal_cards_show_state().size();
}
inline int TableState::cards_show_state_size() const {
  return _internal_cards_show_state_size();
}
inline void TableState::clear_cards_show_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cards_show_state_.Clear();
}
inline ::CardsShowState* TableState::mutable_cards_show_state(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:TableState.cards_show_state)
  return _internal_mutable_cards_show_state()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::CardsShowState>* TableState::mutable_cards_show_state()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:TableState.cards_show_state)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_cards_show_state();
}
inline const ::CardsShowState& TableState::cards_show_state(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TableState.cards_show_state)
  return _internal_cards_show_state().Get(index);
}
inline ::CardsShowState* TableState::add_cards_show_state() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::CardsShowState* _add = _internal_mutable_cards_show_state()->Add();
  // @@protoc_insertion_point(field_add:TableState.cards_show_state)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::CardsShowState>& TableState::cards_show_state() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:TableState.cards_show_state)
  return _internal_cards_show_state();
}
inline const ::google::protobuf::RepeatedPtrField<::CardsShowState>&
TableState::_internal_cards_show_state() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cards_show_state_;
}
inline ::google::protobuf::RepeatedPtrField<::CardsShowState>*
TableState::_internal_mutable_cards_show_state() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.cards_show_state_;
}

// string table_name = 17;
inline void TableState::clear_table_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.table_name_.ClearToEmpty();
}
inline const std::string& TableState::table_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TableState.table_name)
  return _internal_table_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TableState::set_table_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.table_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TableState.table_name)
}
inline std::string* TableState::mutable_table_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_table_name();
  // @@protoc_insertion_point(field_mutable:TableState.table_name)
  return _s;
}
inline const std::string& TableState::_internal_table_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.table_name_.Get();
}
inline void TableState::_internal_set_table_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.table_name_.Set(value, GetArena());
}
inline std::string* TableState::_internal_mutable_table_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.table_name_.Mutable( GetArena());
}
inline std::string* TableState::release_table_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:TableState.table_name)
  return _impl_.table_name_.Release();
}
inline void TableState::set_allocated_table_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.table_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.table_name_.IsDefault()) {
          _impl_.table_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TableState.table_name)
}

// repeated uint64 spin_multipliers = 18;
inline int TableState::_internal_spin_multipliers_size() const {
  return _internal_spin_multipliers().size();
}
inline int TableState::spin_multipliers_size() const {
  return _internal_spin_multipliers_size();
}
inline void TableState::clear_spin_multipliers() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.spin_multipliers_.Clear();
}
inline ::uint64_t TableState::spin_multipliers(int index) const {
  // @@protoc_insertion_point(field_get:TableState.spin_multipliers)
  return _internal_spin_multipliers().Get(index);
}
inline void TableState::set_spin_multipliers(int index, ::uint64_t value) {
  _internal_mutable_spin_multipliers()->Set(index, value);
  // @@protoc_insertion_point(field_set:TableState.spin_multipliers)
}
inline void TableState::add_spin_multipliers(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_spin_multipliers()->Add(value);
  // @@protoc_insertion_point(field_add:TableState.spin_multipliers)
}
inline const ::google::protobuf::RepeatedField<::uint64_t>& TableState::spin_multipliers() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:TableState.spin_multipliers)
  return _internal_spin_multipliers();
}
inline ::google::protobuf::RepeatedField<::uint64_t>* TableState::mutable_spin_multipliers()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:TableState.spin_multipliers)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_spin_multipliers();
}
inline const ::google::protobuf::RepeatedField<::uint64_t>&
TableState::_internal_spin_multipliers() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.spin_multipliers_;
}
inline ::google::protobuf::RepeatedField<::uint64_t>* TableState::_internal_mutable_spin_multipliers() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.spin_multipliers_;
}

// uint64 active_spins_multiplier = 19;
inline void TableState::clear_active_spins_multiplier() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.active_spins_multiplier_ = ::uint64_t{0u};
}
inline ::uint64_t TableState::active_spins_multiplier() const {
  // @@protoc_insertion_point(field_get:TableState.active_spins_multiplier)
  return _internal_active_spins_multiplier();
}
inline void TableState::set_active_spins_multiplier(::uint64_t value) {
  _internal_set_active_spins_multiplier(value);
  // @@protoc_insertion_point(field_set:TableState.active_spins_multiplier)
}
inline ::uint64_t TableState::_internal_active_spins_multiplier() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.active_spins_multiplier_;
}
inline void TableState::_internal_set_active_spins_multiplier(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.active_spins_multiplier_ = value;
}

// -------------------------------------------------------------------

// HandPlayedInfo

// string mongo_hand_id = 1;
inline void HandPlayedInfo::clear_mongo_hand_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mongo_hand_id_.ClearToEmpty();
}
inline const std::string& HandPlayedInfo::mongo_hand_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:HandPlayedInfo.mongo_hand_id)
  return _internal_mongo_hand_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HandPlayedInfo::set_mongo_hand_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mongo_hand_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:HandPlayedInfo.mongo_hand_id)
}
inline std::string* HandPlayedInfo::mutable_mongo_hand_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_mongo_hand_id();
  // @@protoc_insertion_point(field_mutable:HandPlayedInfo.mongo_hand_id)
  return _s;
}
inline const std::string& HandPlayedInfo::_internal_mongo_hand_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.mongo_hand_id_.Get();
}
inline void HandPlayedInfo::_internal_set_mongo_hand_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mongo_hand_id_.Set(value, GetArena());
}
inline std::string* HandPlayedInfo::_internal_mutable_mongo_hand_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.mongo_hand_id_.Mutable( GetArena());
}
inline std::string* HandPlayedInfo::release_mongo_hand_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:HandPlayedInfo.mongo_hand_id)
  return _impl_.mongo_hand_id_.Release();
}
inline void HandPlayedInfo::set_allocated_mongo_hand_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mongo_hand_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.mongo_hand_id_.IsDefault()) {
          _impl_.mongo_hand_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:HandPlayedInfo.mongo_hand_id)
}

// string file_name = 2;
inline void HandPlayedInfo::clear_file_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_name_.ClearToEmpty();
}
inline const std::string& HandPlayedInfo::file_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:HandPlayedInfo.file_name)
  return _internal_file_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HandPlayedInfo::set_file_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:HandPlayedInfo.file_name)
}
inline std::string* HandPlayedInfo::mutable_file_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_file_name();
  // @@protoc_insertion_point(field_mutable:HandPlayedInfo.file_name)
  return _s;
}
inline const std::string& HandPlayedInfo::_internal_file_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.file_name_.Get();
}
inline void HandPlayedInfo::_internal_set_file_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_name_.Set(value, GetArena());
}
inline std::string* HandPlayedInfo::_internal_mutable_file_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.file_name_.Mutable( GetArena());
}
inline std::string* HandPlayedInfo::release_file_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:HandPlayedInfo.file_name)
  return _impl_.file_name_.Release();
}
inline void HandPlayedInfo::set_allocated_file_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.file_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.file_name_.IsDefault()) {
          _impl_.file_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:HandPlayedInfo.file_name)
}

// string hand_header = 3;
inline void HandPlayedInfo::clear_hand_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hand_header_.ClearToEmpty();
}
inline const std::string& HandPlayedInfo::hand_header() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:HandPlayedInfo.hand_header)
  return _internal_hand_header();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HandPlayedInfo::set_hand_header(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hand_header_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:HandPlayedInfo.hand_header)
}
inline std::string* HandPlayedInfo::mutable_hand_header() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_hand_header();
  // @@protoc_insertion_point(field_mutable:HandPlayedInfo.hand_header)
  return _s;
}
inline const std::string& HandPlayedInfo::_internal_hand_header() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.hand_header_.Get();
}
inline void HandPlayedInfo::_internal_set_hand_header(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hand_header_.Set(value, GetArena());
}
inline std::string* HandPlayedInfo::_internal_mutable_hand_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.hand_header_.Mutable( GetArena());
}
inline std::string* HandPlayedInfo::release_hand_header() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:HandPlayedInfo.hand_header)
  return _impl_.hand_header_.Release();
}
inline void HandPlayedInfo::set_allocated_hand_header(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hand_header_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.hand_header_.IsDefault()) {
          _impl_.hand_header_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:HandPlayedInfo.hand_header)
}

// string hand_body = 4;
inline void HandPlayedInfo::clear_hand_body() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hand_body_.ClearToEmpty();
}
inline const std::string& HandPlayedInfo::hand_body() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:HandPlayedInfo.hand_body)
  return _internal_hand_body();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HandPlayedInfo::set_hand_body(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hand_body_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:HandPlayedInfo.hand_body)
}
inline std::string* HandPlayedInfo::mutable_hand_body() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_hand_body();
  // @@protoc_insertion_point(field_mutable:HandPlayedInfo.hand_body)
  return _s;
}
inline const std::string& HandPlayedInfo::_internal_hand_body() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.hand_body_.Get();
}
inline void HandPlayedInfo::_internal_set_hand_body(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hand_body_.Set(value, GetArena());
}
inline std::string* HandPlayedInfo::_internal_mutable_hand_body() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.hand_body_.Mutable( GetArena());
}
inline std::string* HandPlayedInfo::release_hand_body() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:HandPlayedInfo.hand_body)
  return _impl_.hand_body_.Release();
}
inline void HandPlayedInfo::set_allocated_hand_body(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hand_body_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.hand_body_.IsDefault()) {
          _impl_.hand_body_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:HandPlayedInfo.hand_body)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::GameState> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::GameState>() {
  return ::GameState_descriptor();
}
template <>
struct is_proto_enum<::SeatActions> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::SeatActions>() {
  return ::SeatActions_descriptor();
}
template <>
struct is_proto_enum<::PreActions> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::PreActions>() {
  return ::PreActions_descriptor();
}
template <>
struct is_proto_enum<::KickReason> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::KickReason>() {
  return ::KickReason_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_TableState_2eproto_2epb_2eh
